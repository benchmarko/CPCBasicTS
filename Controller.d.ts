import { BasicFormatter } from "./BasicFormatter";
import { BasicTokenizer } from "./BasicTokenizer";
import { Canvas } from "./Canvas";
import { CodeGeneratorJs } from "./CodeGeneratorJs";
import { CommonEventHandler } from "./CommonEventHandler";
import { CpcVm, StopEntry, StopParas } from "./CpcVm";
import { CpcVmRsx } from "./CpcVmRsx";
import { InputStack } from "./InputStack";
import { Keyboard } from "./Keyboard";
import { Model } from "./Model";
import { Sound } from "./Sound";
import { Variables } from "./Variables";
import { View } from "./View";
export declare class Controller {
    fnRunLoopHandler: undefined;
    fnWaitKeyHandler: undefined;
    fnWaitInputHandler: undefined;
    fnOnEscapeHandler: undefined;
    fnDirectInputHandler: undefined;
    fnPutKeyInBufferHandler: undefined;
    sMetaIdent: string;
    fnScript: any;
    bTimeoutHandlerActive: boolean;
    iNextLoopTimeOut: number;
    bInputSet: boolean;
    oVariables: Variables;
    oBasicFormatter: BasicFormatter;
    oBasicTokenizer: BasicTokenizer;
    model: Model;
    view: View;
    commonEventHandler: CommonEventHandler;
    oCodeGeneratorJs: CodeGeneratorJs;
    oCanvas: Canvas;
    inputStack: InputStack;
    oKeyboard: Keyboard;
    oSound: Sound;
    oVm: CpcVm;
    oRsx: CpcVmRsx;
    oNoStop: StopEntry;
    oSavedStop: StopEntry;
    constructor(oModel: Model, oView: View);
    init(oModel: Model, oView: View): void;
    private initDatabases;
    private onUserAction;
    addIndex(sDir: string, sInput: string): void;
    addItem(sKey: string, sInput: string): string;
    private setDatabaseSelectOptions;
    setExampleSelectOptions(): void;
    private setVarSelectOptions;
    updateStorageDatabase(sAction: string, sKey: string): void;
    setInputText(sInput: string, bKeepStack?: boolean): void;
    invalidateScript(): void;
    private fnWaitForContinue;
    private fnOnEscape;
    private fnWaitSound;
    private fnWaitKey;
    private fnWaitInput;
    private mergeScripts;
    private fnGetLinesInRange;
    private static fnPrepareMaskRegExp;
    private fnGetExampleDirectoryEntries;
    private fnGetDirectoryEntries;
    private fnPrintDirectoryEntries;
    fnFileCat(oParas: StopParas): void;
    fnFileDir(oParas: StopParas): void;
    fnFileEra(oParas: StopParas): void;
    fnFileRen(oParas: StopParas): void;
    private static asmGena3Convert;
    private loadFileContinue;
    private loadExample;
    private fnLocalStorageName;
    private tryLoadingFromLocalStorage;
    fnFileLoad(): void;
    private joinMeta;
    private splitMeta;
    fnFileSave(): void;
    fnDeleteLines(oParas: StopParas): void;
    fnNew(): void;
    fnList(oParas: StopParas): void;
    fnReset(): void;
    private outputError;
    fnRenumLines(oParas: StopParas): {
        text: string;
        error: any;
    };
    private fnEditLineCallback;
    fnEditLine(oParas: StopParas): void;
    private fnParseBench;
    fnParse(): any;
    fnPretty(): void;
    private selectJsError;
    private fnRun;
    private fnParseRun;
    private fnRunPart1;
    private fnDirectInput;
    private startWithDirectInput;
    private updateResultText;
    private exitLoop;
    fnBreak(): void;
    fnDirect(): void;
    fnEnd(): void;
    fnError(): void;
    fnEscape(): void;
    fnWaitFrame(): void;
    fnOnError(): void;
    fnStop(): void;
    fnTimer(): void;
    private fnRunLoop;
    startMainLoop(): void;
    private setStopObject;
    private getStopObject;
    startParse(): void;
    startRenum(): void;
    startRun(): void;
    startParseRun(): void;
    startBreak(): void;
    startContinue(): void;
    startReset(): void;
    startScreenshot(): string;
    private fnPutKeyInBuffer;
    startEnter(): void;
    private static generateFunction;
    changeVariable(): void;
    setSoundActive(): void;
    private static createMinimalAmsdosHeader;
    fnHandleFileSelect(event: DragEvent): void;
    private fnHandleDragOver;
    private initDropZone;
    private fnUpdateUndoRedoButtons;
    private fnInitUndoRedoButtons;
    private fnPutChangedInputOnStack;
    static exportAsBase64(sStorageName: string): string;
}
