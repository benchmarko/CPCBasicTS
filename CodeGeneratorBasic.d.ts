import { BasicLexer } from "./BasicLexer";
import { BasicParser, ParserNode } from "./BasicParser";
import { IOutput } from "./Interfaces";
interface CodeGeneratorBasicOptions {
    lexer: BasicLexer;
    parser: BasicParser;
}
export declare class CodeGeneratorBasic {
    private lexer;
    private parser;
    private iLine;
    constructor(options: CodeGeneratorBasicOptions);
    getLexer(): BasicLexer;
    getParser(): BasicParser;
    private static mCombinedKeywords;
    private static mOperators;
    private static mOperatorPrecedence;
    private composeError;
    private static fnWs;
    private static fnSpace1;
    private static getUcKeyword;
    private fnParseOneArg;
    private fnParseArgs;
    private static fnColonsAvailable;
    private static combineArgsWithColon;
    private fnParenthesisOpen;
    private static string;
    private static unquoted;
    private static fnNull;
    private assign;
    private static decBinHexNumber;
    private identifier;
    private static linenumber;
    private label;
    private vertical;
    private afterEveryGosub;
    private chainMerge;
    private data;
    private def;
    private "else";
    private entEnv;
    private fn;
    private "for";
    private fnThenOrElsePart;
    private "if";
    private static fnHasStream;
    private inputLineInput;
    private list;
    private mid$Assign;
    private onGotoGosub;
    private onSqGosub;
    private print;
    private rem;
    private using;
    mParseFunctions: {
        [k: string]: (node: ParserNode) => string;
    };
    private fnParseOther;
    private parseNode;
    private evaluate;
    generate(sInput: string, bAllowDirect?: boolean): IOutput;
}
export {};
