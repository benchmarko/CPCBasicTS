export interface CanvasOptions {
    aCharset: number[][];
    onClickKey?: (arg0: string) => void;
}
export declare class Canvas {
    fnUpdateCanvasHandler: any;
    fnUpdateCanvas2Handler: any;
    iFps: number;
    iTextFpsCounter: number;
    cpcAreaBox: any;
    textText: any;
    aCharset: number[][];
    onClickKey?: (arg0: string) => void;
    iGColMode: number;
    bClipped: boolean;
    iMask: number;
    iMaskBit: number;
    iMaskFirst: number;
    iOffset: number;
    canvas: any;
    iWidth: number;
    iHeight: number;
    iBorderWidth: number;
    dataset8: any;
    bNeedUpdate: boolean;
    bNeedTextUpdate: boolean;
    aColorValues: any[];
    aCurrentInks: any[];
    aSpeedInk: any[];
    aPen2ColorMap: any[];
    animationTimeout: any;
    animationFrame: any;
    imageData: any;
    fnCopy2Canvas: any;
    bLittleEndian: boolean;
    aPen2Color32: any;
    aData32: any;
    bUse32BitCopy: boolean;
    iGPen: any;
    iGPaper: any;
    iInkSet: number;
    iSpeedInkCount: number;
    oCustomCharset: {};
    aTextBuffer: any[];
    bHasFocus: boolean;
    oModeData: any;
    iMode: number;
    xPos: number;
    yPos: number;
    xOrig: number;
    yOrig: number;
    xLeft: number;
    xRight: number;
    yTop: number;
    yBottom: number;
    bGTransparent: boolean;
    constructor(options: CanvasOptions);
    aColors: string[];
    aDefaultInks: number[][];
    aModeData: {
        iPens: number;
        iPixelWidth: number;
        iPixelHeight: number;
    }[];
    sCpc2Unicode: string;
    init(options: CanvasOptions): void;
    reset(): void;
    resetCustomChars(): void;
    resetTextBuffer(): void;
    isLittleEndian(): boolean;
    extractColorValues(sColor: any): number[];
    extractAllColorValues(aColors: any): any[];
    setAlpha(iAlpha: any): void;
    setNeedUpdate(): void;
    setNeedTextUpdate(): void;
    updateCanvas2(): void;
    updateCanvas(): void;
    startUpdateCanvas(): void;
    stopUpdateCanvas(): void;
    copy2Canvas8bit(): void;
    copy2Canvas32bit(): void;
    copy2Canvas32bitWithOffset(): void;
    setScreenOffset(iOffset: any): void;
    updateTextWindow(): void;
    updateColorMap(): void;
    updateSpeedInk(): void;
    setCustomChar(iChar: any, aCharData: any): void;
    getCharData(iChar: any): any;
    setDefaultInks(): void;
    setFocusOnCanvas(): void;
    getMousePos(event: any): {
        x: number;
        y: number;
    };
    canvasClickAction2(event: any): void;
    onCpcCanvasClick(event: any): void;
    onWindowClick(): void;
    getXpos(): number;
    getYpos(): number;
    fillMyRect(x: any, y: any, iWidth: any, iHeight: any, iPen: any): void;
    fillTextBox(iLeft: any, iTop: any, iWidth: any, iHeight: any, iPen: any): void;
    moveMyRectUp(x: any, y: any, iWidth: any, iHeight: any, x2: any, y2: any): void;
    moveMyRectDown(x: any, y: any, iWidth: any, iHeight: any, x2: any, y2: any): void;
    invertChar(x: any, y: any, iPen: any, iPaper: any): void;
    setChar(iChar: any, x: any, y: any, iPen: any, iPaper: any, bTransparent: any, iGColMode: any, bTextAtGraphics: any): void;
    readCharData(x: any, y: any, iExpectedPen: any): any[];
    setSubPixels(x: any, y: any, iGPen: any, iGColMode: any): void;
    setPixel(x: any, y: any, iGPen: any, iGColMode: any): void;
    setPixelOriginIncluded(x: any, y: any, iGPen: any, iGColMode: any): void;
    testSubPixel(x: any, y: any): any;
    testPixel(x: any, y: any): any;
    getByte(iAddr: any): any;
    setByte(iAddr: any, iByte: any): void;
    drawBresenhamLine(xstart: any, ystart: any, xend: any, yend: any): void;
    draw(x: any, y: any): void;
    drawr(x: any, y: any): void;
    move(x: any, y: any): void;
    mover(x: any, y: any): void;
    plot(x: any, y: any): void;
    plotr(x: any, y: any): void;
    test(x: any, y: any): any;
    testr(x: any, y: any): any;
    setInk(iPen: any, iInk1: any, iInk2: any): boolean;
    setBorder(iInk1: any, iInk2: any): void;
    setGPen(iGPen: any): void;
    setGPaper(iGPaper: any): void;
    setGTransparentMode(bTransparent: any): void;
    printGChar(iChar: any): void;
    clearTextBufferBox(iLeft: any, iTop: any, iWidth: any, iHeight: any): void;
    copyTextBufferBoxUp(iLeft: any, iTop: any, iWidth: any, iHeight: any, iLeft2: any, iTop2: any): void;
    copyTextBufferBoxDown(iLeft: any, iTop: any, iWidth: any, iHeight: any, iLeft2: any, iTop2: any): void;
    putCharInTextBuffer(iChar: any, x: any, y: any): void;
    getCharFromTextBuffer(x: any, y: any): any;
    printChar(iChar: any, x: any, y: any, iPen: any, iPaper: any, bTransparent: any): void;
    drawCursor(x: any, y: any, iPen: any, iPaper: any): void;
    findMatchingChar(aCharData: any): number;
    readChar(x: any, y: any, iPen: any, iPaper: any): any;
    fill(iFillPen: any): void;
    fnPutInRange(n: any, min: any, max: any): any;
    setOrigin(xOrig: any, yOrig: any): void;
    setGWindow(xLeft: any, xRight: any, yTop: any, yBottom: any): void;
    setGColMode(iGColMode: any): void;
    clearTextWindow(iLeft: any, iRight: any, iTop: any, iBottom: any, iPaper: any): void;
    clearGraphicsWindow(): void;
    clearFullWindow(): void;
    windowScrollUp(iLeft: any, iRight: any, iTop: any, iBottom: any, iPen: any): void;
    windowScrollDown(iLeft: any, iRight: any, iTop: any, iBottom: any, iPen: any): void;
    setSpeedInk(iTime1: any, iTime2: any): void;
    setMask(iMask: any): void;
    setMaskFirst(iMaskFirst: any): void;
    getMode(): number;
    changeMode(iMode: any): void;
    setMode(iMode: any): void;
}
