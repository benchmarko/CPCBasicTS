import { Model } from "./Model";
import { View } from "./View";
export declare class CommonEventHandler {
    static fnEventHandler: undefined;
    model: Model;
    view: View;
    controller: any;
    fnUserAction: any;
    mHandlers: {
        [k: string]: (e: Event) => void;
    };
    constructor(oModel: Model, oView: View, oController: any);
    init(oModel: Model, oView: View, oController: any): void;
    private fnCommonEventHandler;
    private attachEventHandler;
    private toogleHidden;
    fnActivateUserAction(fnAction: () => void): void;
    fnDeactivateUserAction(): void;
    private onSpecialButtonClick;
    private onInputButtonClick;
    private onInp2ButtonClick;
    private onOutputButtonClick;
    private onResultButtonClick;
    private onTextButtonClick;
    private onVariableButtonClick;
    private onCpcButtonClick;
    private onKbdButtonClick;
    private onKbdLayoutButtonClick;
    private onConsoleButtonClick;
    private onParseButtonClick;
    private onRenumButtonClick;
    private onPrettyButtonClick;
    private fnUpdateAreaText;
    private onUndoButtonClick;
    private onRedoButtonClick;
    private onRunButtonClick;
    private onStopButtonClick;
    private onContinueButtonClick;
    private onResetButtonClick;
    private onParseRunButtonClick;
    private onHelpButtonClick;
    private onInputTextClick;
    private onOutputTextClick;
    private onResultTextClick;
    private onVarTextClick;
    private onOutputTextChange;
    private encodeUriParam;
    private onReloadButtonClick;
    onDatabaseSelectChange(): void;
    private onExampleSelectChange;
    onVarSelectChange(): void;
    onKbdLayoutSelectChange(): void;
    private onVarTextChange;
    private onScreenshotButtonClick;
    private onEnterButtonClick;
    private onSoundButtonClick;
    onCpcCanvasClick(event: Event): void;
    onWindowClick(event: Event): void;
}
