// BasicTokenizer.qunit.ts - QUnit tests for CPCBasic BasicTokenizer
//

import { BasicTokenizer } from "../BasicTokenizer";
import { TestHelper, TestsType, AllTestsType, ResultType } from "./TestHelper";

QUnit.dump.maxDepth = 10;

// tests marked with "L" are full programs with line numbers

const allTests: AllTestsType = {
	numbers: {
		"0D,00,00,E1,EF,0F": "a=1",
		"0D,00,00,E1,EF,1F,9A,99,99,19,81": "a=1.2",
		"0D,00,00,E1,EF,F5,1F,9A,99,99,19,81": "a=-1.2",
		"0D,00,00,E1,EF,F4,1F,66,66,66,66,83": "a=+7.2",
		"0D,00,00,E1,EF,1C,00,00": "a=&0",
		"0D,00,00,E1,EF,1C,A7,00": "a=&A7",
		"0D,00,00,E1,EF,F5,1C,A7,00": "a=-&A7",
		"0D,00,00,E1,EF,1C,FF,7F": "a=&7FFF",
		//"0D,00,00,E1,EF,1C,00,00": "a=&h0",
		//"0D,00,00,E1,EF,1C,FF,7F": "a=&H7FFF",
		"0D,00,00,E1,EF,1C,00,80": "a=&8000",
		"0D,00,00,E1,EF,1C,FF,FF": "a=&FFFF",
		"0D,00,00,E1,EF,1C,23,E1": "a=&E123",
		//"0D,00,00,E1,EF,1C,23,E1": "a=&HE123",
		"0D,00,00,E1,EF,1B,00,00": "a=&X0",
		"0D,00,00,E1,EF,1B,A7,00": "a=&X10100111",
		"0D,00,00,E1,EF,F5,1B,FF,7F": "a=-&X111111111111111",
		"0D,00,00,E1,EF,19,FF": "a=255",
		"0D,00,00,E1,EF,F5,19,FF": "a=-255",
		"0D,00,00,E1,EF,1A,00,01": "a=256",
		"0D,00,00,E1,EF,F5,1A,00,01": "a=-256",
		"0D,00,00,E1,EF,1A,FF,7F": "a=32767",
		"0D,00,00,E1,EF,F5,1A,FF,7F": "a=-32767",
		"0D,00,00,E1,EF,1F,00,00,00,00,90": "a=32768",
		"0D,00,00,E1,EF,F5,1F,00,00,00,00,90": "a=-32768",
		"0D,00,00,E1,EF,1F,00,00,00,00,91": "a=65536",
		"0D,00,00,E1,EF,1F,00,18,0D,0F,9F": "a=1.2E+09"
		//"BasicLexer: Expected hex number at pos 2-3: &": "a=&",
		//"BasicLexer: Expected hex number at pos 2-4: &h": "a=&h",
		//"BasicLexer: Expected binary number at pos 2-4: &x": "a=&x",
		//"BasicLexer: Expected binary number at pos 2-4: &x": "a=&x2",
		//"BasicParser: Expected = at pos 2: (end)": "a ",
		//"BasicParser: Unexpected end of file in 1 at pos 4: ": "1 a=",
		//"BasicParser: Bad expression statement in 1 at pos 2-3: 5": "1 5=7",
		//"BasicParser: Expected variable in 1 at pos 6-7: 5": "1 let 5=7"
	},
	strings: {
		"03,00,00,E1,EF,22,61,31,32,22": 'a$="a12"',
		"03,00,00,E1,EF,F4,22,37,2E,31,22": 'a$=+"7.1"',
		"03,00,00,E1,EF,22,5C,22": 'a$="\\"',
		"03,00,00,E1,EF,22,75,6E,74,65,72,6D,69,6E,61,74,65,64,20,73,74,72,69,6E,67": 'a$="unterminated string',
		"03,00,00,E1,EF,22,73,74,72,69,6E,67,20,77,69,74,68,0A,6E,65,77,6C,69,6E,65,22": 'a$="string with\nnewline"',
		"03,00,00,E1,EF,22,75,6E,74,65,72,6D,69,6E,61,74,65,64,20,73,74,72,69,6E,67,20,77,69,74,68,0A,6E,65,77,6C,69,6E,65,3D,37": 'a$="unterminated string with\nnewline=7',
		"L,1E,00,01,00,03,00,00,E1,EF,22,75,6E,74,65,72,6D,69,6E,61,74,65,64,20,73,74,72,69,6E,67,00,11,00,02,00,0D,00,00,6E,65,77,6C,69,6E,E5,EF,15,00,00,00": '1 a$="unterminated string\n2 newline=7'
	},
	variables: {
		"04,00,00,E1,EF,1F,33,33,33,33,81": "a!=1.4",
		"02,00,00,E1,EF,1F,33,33,33,33,81": "a%=1.4",
		"03,00,00,E1,EF,22,31,2E,34,22": 'a$="1.4"',
		"0D,00,00,63,61,73,E5,EF,0F": "case=1",
		"0D,00,00,43,41,53,C5,EF,0F": "CASE=1",
		"0D,00,00,43,61,53,E5,EF,0D,00,00,63,41,73,C5": "CaSe=cAsE",
		"0D,00,00,69,6E,73,65,72,74,2E,6C,69,6E,E5,EF,10": "insert.line=2",
		"0D,00,00,69,6E,2E,73,65,72,2E,74,2E,6C,69,6E,2E,E5,EF,10": "in.ser.t.lin.e=2",
		"04,00,00,E1,28,10,29,EF,1F,33,33,33,33,81": "a!(2)=1.4",
		"02,00,00,E1,28,10,29,EF,1F,33,33,33,33,81": "a%(2)=1.4",
		"03,00,00,E1,28,10,29,EF,22,31,2E,34,22": 'a$(2)="1.4"',
		"03,00,00,E1,5B,10,5D,EF,22,31,2E,34,22": 'a$[2]="1.4"',
		"0D,00,00,E1,28,17,29,EF,0D,00,00,E2,28,0F,2C,10,29": "a(9)=b(1,2)",
		"0D,00,00,E1,5B,17,5D,EF,0D,00,00,E2,5B,0F,2C,10,5D": "a[9]=b[1,2]",
		"0D,00,00,E1,28,19,0A,2C,19,0A,2C,19,0A,29,EF,0D,00,00,E2,28,19,0A,2C,17,29": "a(10,10,10)=b(10,9)",
		"04,00,00,E1,28,1F,33,33,33,33,81,29,EF,04,00,00,E2,28,1F,00,00,00,40,81,2C,1F,9A,99,99,19,82,2C,0F,29": "a!(1.4)=b!(1.5,2.4,1)",
		"04,00,00,E1,28,0D,00,00,E2,F4,0F,29,EF,04,00,00,E2,28,0D,00,00,E1,2C,02,00,00,E1,F6,10,2C,02,00,00,E1,F4,1F,00,00,00,40,81,29": "a!(b+1)=b!(a,a%*2,a%+1.5)",
		"04,00,00,E1,28,0D,00,00,E2,F4,0F,29,EF,04,00,00,E2,28,FF,0C,28,0D,00,00,E1,29,2C,02,00,00,E1,F6,10,2C,02,00,00,E1,F5,0F,F4,1C,0D,00,29": "a!(b+1)=b!(INT(a),a%*2,a%-1+&D)",
		"L,0E,00,01,00,03,00,00,E1,EF,02,00,00,E1,00,00,00": "1 a$=a%",
		"L,0E,00,01,00,03,00,00,E1,EF,04,00,00,E1,00,00,00": "1 a$=a!"
		//"BasicParser: Unexpected token in 1 at pos 6-9: def": "1 abc=def"
	},
	expressions: {
		"0D,00,00,E1,EF,0F,F4,10,F4,11": "a=1+2+3",
		"0D,00,00,E1,EF,11,F5,10,F5,0F,01": "a=3-2-1:",
		"0D,00,00,E1,EF,1C,A7,00,F4,1B,A7,00,F5,28,19,7B,F5,19,1B,29": "a=&A7+&X10100111-(123-27)",
		"0D,00,00,E1,EF,28,11,F4,10,29,F6,28,11,F5,15,29": "a=(3+2)*(3-7)",
		"0D,00,00,E1,EF,F5,28,19,0A,F5,15,29,F5,28,F5,14,F5,10,29": "a=-(10-7)-(-6-2)",
		"0D,00,00,E1,EF,19,14,F7,1F,00,00,00,20,82": "a=20/2.5",
		"0D,00,00,E1,EF,19,14,F9,11": "a=20\\3",
		"0D,00,00,E1,EF,11,F8,10,01": "a=3^2:",
		"0D,00,00,E1,EF,1B,09,00,20,FA,20,1B,0E,00": "a=&X1001 AND &X1110",
		"0D,00,00,E1,EF,1B,09,00,20,FC,20,1B,06,00": "a=&X1001 OR &X110",
		"0D,00,00,E1,EF,1B,09,00,20,FD,20,1B,0A,00": "a=&X1001 XOR &X1010",
		"0D,00,00,E1,EF,FE,20,1B,09,00": "a=NOT &X1001",
		"0D,00,00,E1,EF,F4,F4,F4,F4,F4,F4,F4,F4,F4,F5,F5,F5,17": "a=+++++++++---9",
		"0D,00,00,E1,EF,28,0F,EF,0E,29": "a=(1=0)",
		"0D,00,00,E1,EF,28,0F,EE,0E,29,F6,28,0E,F1,0F,29": "a=(1>0)*(0<1)",
		"0D,00,00,E1,EF,28,02,00,00,E2,F0,02,00,00,E3,29,F6,28,0D,00,00,E4,F3,0D,00,00,E5,29": "a=(b%>=c%)*(d<=e)",
		"0D,00,00,E1,EF,0F,EF,0F,EF,F5,0F": "a=1=1=-1",
		"0D,00,00,E1,EF,0F,F0,0F,EE,0F": "a=1>=1>1"
	},
	"Line numbers": {
		"L,05,00,01,00,00,00,00": "1 ",
		"L,06,00,00,00,8A,00,00,00": "0 CLS",
		"L,06,00,FF,FF,8A,00,00,00": "65535 CLS",
		"L,06,00,00,100,8A,00,00,00": "65536 CLS",
		"L,06,00,01,00,8A,00,00,00": "1 CLS",
		"L,06,00,02,00,8A,00,06,00,01,00,8A,00,00,00": "2 CLS\n1 CLS"
	},
	special: {
		//"BasicLexer: Unrecognized token at pos 0-1: !": "!"
		"L,1F,00,01,00,A1,0D,00,00,6D,F5,EF,0E,EB,B5,28,0F,29,9F,1E,01,00,97,B5,28,12,29,9F,1E,01,00,00,00,00": "1 IF mu=0 THEN ON SQ(1)GOSUB 1 ELSE ON SQ(4)GOSUB 1"
	},
	"abs, after gosub, and, asc, atn, auto": {
		"0D,00,00,E1,EF,FF,00,28,1F,33,33,33,13,82,29": "a=ABS(2.3)",
		"L,0E,00,0A,00,80,20,10,20,9F,20,1E,0A,00,00,00,00": "10 AFTER 2 GOSUB 10",
		"L,10,00,0A,00,80,20,11,2C,0F,20,9F,20,1E,0A,00,00,00,00": "10 AFTER 3,1 GOSUB 10",
		//"BasicParser: Unexpected token in 1 at pos 8-13: gosub": "1 after gosub 1",
		//"BasicParser: Expected end of arguments in 1 at pos 11-12: ,": "1 after 1,2,3 gosub 1",
		"0D,00,00,E1,EF,0D,00,00,E2,20,FA,20,0D,00,00,E3": "a=b AND c",
		"0D,00,00,E1,EF,FF,01,28,22,41,22,29": 'a=ASC("A")',
		"04,00,00,E1,EF,FF,01,28,03,00,00,E2,29,20,FA,20,02,00,00,E3": "a!=ASC(b$) AND c%",
		"0D,00,00,E1,EF,FF,02,28,1F,33,33,33,13,82,29": "a=ATN(2.3)",
		"81 ": "AUTO",
		"81,20,19,64": "AUTO 100"
	},
	"bin$, border": {
		"03,00,00,E1,EF,FF,71,28,11,29": "a$=BIN$(3)",
		"03,00,00,E1,EF,FF,71,28,11,2C,16,29": "a$=BIN$(3,8)",
		"03,00,00,E1,EF,FF,71,28,1B,09,00,29": "a$=BIN$(&X1001)",
		"82,20,13": "BORDER 5",
		"82,20,13,2C,0D,00,00,E1": "BORDER 5,a"
	},
	"call, cat, chain, chain merge, chr$, cint, clg, closein, closeout, cls, cont, copychr$, cos, creal, cursor": {
		"83,1C,BC,A7": "CALL &A7BC",
		"83,20,1A,67,12,2C,0F,2C,10,2C,11,2C,12": "CALL 4711,1,2,3,4",
		"84 ": "CAT",
		"85,22,66,31,22": 'CHAIN"f1"',
		"85,22,66,32,22,20,2C,20,19,0A": 'CHAIN"f2" , 10',
		"85,22,66,33,22,20,2C,20,19,0A,F4,11": 'CHAIN"f3" , 10+3',
		"85,20,22,66,34,22,20,2C,20,19,0A,F4,11,2C,20,92,20,1E,64,00,F5,1E,C8,00": 'CHAIN "f4" , 10+3, DELETE 100-200',
		"85,20,22,66,35,22,20,2C,20,2C,20,92,20,1E,64,00,F5,1E,C8,00": 'CHAIN "f5" , , DELETE 100-200',
		"85,20,AB,20,22,66,31,22": 'CHAIN MERGE "f1"',
		"85,20,AB,20,22,66,32,22,20,2C,20,19,0A": 'CHAIN MERGE "f2" , 10',
		"85,20,AB,20,22,66,33,22,20,2C,20,19,0A,F4,11": 'CHAIN MERGE "f3" , 10+3',
		"85,20,AB,20,22,66,34,22,20,2C,20,19,0A,F4,11,2C,20,92,20,1E,64,00,F5,1E,C8,00": 'CHAIN MERGE "f4" , 10+3, DELETE 100-200',
		"85,20,AB,20,22,66,35,22,20,2C,20,2C,20,92,20,1E,64,00,F5,1E,C8,00": 'CHAIN MERGE "f5" , , DELETE 100-200',
		"0D,00,00,E1,EF,FF,03,28,19,41,29": "a=CHR$(65)",
		"0D,00,00,E1,EF,FF,04,28,1F,33,33,33,13,82,29": "a=CINT(2.3)",
		"86 ": "CLEAR",
		"86,20,A3": "CLEAR INPUT",
		"87 ": "CLG",
		"87,20,19,0F,F5,0F": "CLG 15-1",
		"88 ": "CLOSEIN",
		"89 ": "CLOSEOUT",
		"8A": "CLS",
		"8A,20,23,13": "CLS #5",
		"8A,20,23,0D,00,00,E1,F4,15,F5,10,F6,0D,00,00,E2": "CLS #a+7-2*b",
		"8B": "CONT",
		"03,00,00,E1,EF,FF,7E,28,23,0E,29": "a$=COPYCHR$(#0)",
		"03,00,00,E1,EF,FF,7E,28,23,0D,00,00,E1,F4,0F,29": "a$=COPYCHR$(#a+1)",
		"0D,00,00,E1,EF,FF,05,28,1F,33,33,33,13,82,29": "a=COS(2.3)",
		"0D,00,00,E1,EF,FF,06,28,1F,33,33,33,13,82,F4,0D,00,00,E1,29": "a=CREAL(2.3+a)",
		"E1 ": "CURSOR",
		"E1,20,0E": "CURSOR 0",
		"E1,20,0F": "CURSOR 1",
		"E1,20,0F,2C,0F": "CURSOR 1,1",
		"E1,20,2C,0F": "CURSOR ,1",
		"E1,20,23,10": "CURSOR #2",
		"E1,20,23,10,2C,0F": "CURSOR #2,1",
		"E1,20,23,10,2C,0F,2C,0F": "CURSOR #2,1,1",
		"E1,20,23,10,2C,2C,0F": "CURSOR #2,,1"
	},
	"data, dec$, def fn, defint, defreal, defstr, deg, delete, derr, di, dim, draw, drawr": {
		"8C": "DATA",
		"8C,20,2C": "DATA ,",
		"8C,20,5C": "DATA \\",
		"8C,20,31,2C,32,2C,33": "DATA 1,2,3",
		"8C,20,22,69,74,65,6D,31,22,2C,22,20,69,74,65,6D,32,22,2C,22,69,74,65,6D,33,20,22": 'DATA "item1"," item2","item3 "',
		"8C,20,69,74,65,6D,31,2C,69,74,65,6D,32,2C,69,74,65,6D,33": "DATA item1,item2,item3",
		"8C,20,26,61,33,2C,34,2C,61,62,63,2C": "DATA &a3,4,abc,",
		"8C,20,22,20,22,2C,21,22,23,24,25,26,27,28,29,2A,2B,2C,22,2C,22": 'DATA " ",!"#$%&\'()*+,","',
		"8C,20,22,73,74,72,69,6E,67,20,69,6E,20,64,61,74,61,20,77,69,74,68,0A,6E,65,77,6C,69,6E,65,22": 'DATA "string in data with\nnewline"',
		"03,00,00,E1,EF,FF,72,28,11,2C,22,23,23,2E,23,23,22,29": 'a$=DEC$(3,"##.##")',
		"8D,20,E4,0D,00,00,63,6C,EB,EF,19,0A": "DEF FNclk=10",
		"8D,20,E4,0D,00,00,63,6C,EB,28,0D,00,00,E1,29,EF,0D,00,00,E1,F6,19,0A": "DEF FNclk(a)=a*10",
		"8D,20,E4,0D,00,00,63,6C,EB,28,0D,00,00,E1,2C,0D,00,00,E2,29,EF,0D,00,00,E1,F6,19,0A,F4,0D,00,00,E2": "DEF FNclk(a,b)=a*10+b",
		"8D,20,E4,03,00,00,63,6C,EB,28,03,00,00,E1,2C,03,00,00,E2,29,EF,03,00,00,E1,F4,03,00,00,E2": "DEF FNclk$(a$,b$)=a$+b$",
		"8D,20,E4,20,0D,00,00,63,6C,EB,EF,19,0A": "DEF FN clk=10",
		"8D,20,E4,20,0D,00,00,63,6C,EB,28,0D,00,00,E1,29,EF,0D,00,00,E1,F6,19,0A": "DEF FN clk(a)=a*10",
		"8D,20,E4,20,0D,00,00,63,6C,EB,28,0D,00,00,E1,2C,0D,00,00,E2,29,EF,0D,00,00,E1,F6,19,0A,F4,0D,00,00,E2": "DEF FN clk(a,b)=a*10+b",
		"8D,20,E4,20,03,00,00,63,6C,EB,28,03,00,00,E1,2C,03,00,00,E2,29,EF,03,00,00,E1,F4,03,00,00,E2": "DEF FN clk$(a$,b$)=a$+b$",
		//"BasicParser: Expected identifier at pos 6-9: cls": "def fncls=1",
		//"BasicParser: Expected variable at pos 12-13: +": "def fncls1(x+1)=1",
		//"BasicParser: Expected fn at pos 4-6: fx": "def fx=1",
		//"BasicParser: Expected fn at pos 4-6: fx": "def fx y=1",
		"8E,20,61": "DEFINT a",
		"8E,20,61,2D,74": "DEFINT a-t",
		"8E,20,61,2D,54": "DEFINT a-T",
		"8E,20,61,2C,62,2C,63": "DEFINT a,b,c",
		"8E,20,61,2C,62,2D,63,2C,76,2C,78,2D,79": "DEFINT a,b-c,v,x-y",
		"8E,20,61,01,0D,00,00,E2,EF,0D,00,00,E1,F4,0D,00,00,E3": "DEFINT a:b=a+c",
		"8E,20,61,01,0D,00,00,E1,EF,0D,00,00,E1,F4,0F": "DEFINT a:a=a+1",
		"8E,20,61,01,04,00,00,E1,EF,04,00,00,E1,F4,02,00,00,E1,01,03,00,00,E1,EF,22,37,22": 'DEFINT a:a!=a!+a%:a$="7"',
		"8E,20,61,01,0D,00,00,61,E2,EF,0D,00,00,61,E2,F4,0D,00,00,64,E5,5B,15,5D": "DEFINT a:ab=ab+de[7]",
		"L,0A,00,01,00,8E,20,7A,2D,61,00,00,00": "1 DEFINT z-a",
		"8F,20,61": "DEFREAL a",
		"8F,20,61,2D,74": "DEFREAL a-t",
		"8F,20,61,2D,54": "DEFREAL a-T",
		"8F,20,61,2C,62,2C,63": "DEFREAL a,b,c",
		"8F,20,61,2C,62,2D,63,2C,76,2C,78,2D,79": "DEFREAL a,b-c,v,x-y",
		"8F,20,61,01,0D,00,00,E2,EF,0D,00,00,E1,F4,0D,00,00,E3": "DEFREAL a:b=a+c",
		"8F,20,61,01,0D,00,00,E1,EF,0D,00,00,E1,F4,0F": "DEFREAL a:a=a+1",
		"8F,20,61,01,04,00,00,E1,EF,04,00,00,E1,F4,02,00,00,E1,01,03,00,00,E1,EF,22,37,22": 'DEFREAL a:a!=a!+a%:a$="7"',
		"8F,20,61,01,0D,00,00,61,E2,EF,0D,00,00,61,E2,F4,0D,00,00,64,E5,5B,15,5D": "DEFREAL a:ab=ab+de[7]",
		"L,0A,00,01,00,8F,20,7A,2D,61,00,00,00": "1 DEFREAL z-a",
		"90,20,61": "DEFSTR a",
		"90,20,61,2D,74": "DEFSTR a-t",
		"90,20,61,2D,54": "DEFSTR a-T",
		"90,20,61,2C,62,2C,63": "DEFSTR a,b,c",
		"90,20,61,2C,62,2D,63,2C,76,2C,78,2D,79": "DEFSTR a,b-c,v,x-y",
		"90,20,61,01,0D,00,00,E2,EF,0D,00,00,E1,F4,0D,00,00,E3": "DEFSTR a:b=a+c",
		"90,20,61,01,0D,00,00,E1,EF,0D,00,00,E1,F4,0F": "DEFSTR a:a=a+1",
		"90,20,61,01,04,00,00,E1,EF,04,00,00,E1,F4,02,00,00,E1,01,03,00,00,E1,EF,22,37,22": 'DEFSTR a:a!=a!+a%:a$="7"',
		"90,20,61,01,0D,00,00,61,E2,EF,0D,00,00,61,E2,F4,0D,00,00,64,E5,5B,15,5D": "DEFSTR a:ab=ab+de[7]",
		"L,0A,00,01,00,90,20,7A,2D,61,00,00,00": "1 DEFSTR z-a",
		"90,20,66,01,0D,00,00,E6,28,0D,00,00,F8,29,EF,22,77,22": 'DEFSTR f:f(x)="w"',
		"91 ": "DEG",
		"92 ": "DELETE",
		"92,20,F5": "DELETE -",
		"92,20,2C": "DELETE ,",
		"92,20,F5,2C": "DELETE -,",
		"92,20,1E,0A,00": "DELETE 10",
		"92,20,1E,01,00,F5": "DELETE 1-",
		"92,20,F5,1E,01,00": "DELETE -1",
		"92,20,1E,01,00,F5,1E,02,00": "DELETE 1-2",
		"L,0E,00,01,00,92,20,1E,02,00,F5,1E,01,00,00,00,00": "1 DELETE 2-1",
		//"BasicParser: Expected : in 1 at pos 10-11: +": "1 delete 1+2",
		//"BasicParser: Expected : in 1 at pos 9-10: a": "1 delete a",
		"0D,00,00,E1,EF,FF,49": "a=DERR",
		"DB ": "DI",
		"93,20,0D,00,00,E1,28,0F,29": "DIM a(1)",
		"93,20,04,00,00,E1,28,0F,29": "DIM a!(1)",
		"93,20,02,00,00,E1,28,0F,29": "DIM a%(1)",
		"93,20,03,00,00,E1,28,0F,29": "DIM a$(1)",
		"93,20,0D,00,00,E1,28,10,2C,19,0D,29": "DIM a(2,13)",
		"93,20,0D,00,00,E1,28,10,2C,19,0D,F4,15,29,2C,03,00,00,E2,5B,11,5D,2C,04,00,00,E3,5B,10,F6,0D,00,00,E1,2C,15,5D": "DIM a(2,13+7),b$[3],c![2*a,7]",
		"93,20,0D,00,00,E1,5B,10,2C,19,0D,29": "DIM a[2,13)",
		"94,20,19,0A,2C,19,14": "DRAW 10,20",
		"94,20,F5,19,0A,2C,F5,19,14,2C,15": "DRAW -10,-20,7",
		"94,20,19,0A,2C,19,14,2C,15,2C,11": "DRAW 10,20,7,3",
		"94,20,19,0A,2C,19,14,2C,2C,11": "DRAW 10,20,,3",
		"94,20,0D,00,00,F8,2C,0D,00,00,F9,2C,0D,00,00,ED,2C,0D,00,00,67,B1": "DRAW x,y,m,g1",
		"95,20,19,0A,2C,19,14": "DRAWR 10,20",
		"95,20,F5,19,0A,2C,F5,19,14,2C,15": "DRAWR -10,-20,7",
		"95,20,19,0A,2C,19,14,2C,15,2C,11": "DRAWR 10,20,7,3",
		"95,20,19,0A,2C,19,14,2C,2C,11": "DRAWR 10,20,,3",
		"95,20,0D,00,00,F8,2C,0D,00,00,F9,2C,0D,00,00,ED,2C,0D,00,00,67,B1": "DRAWR x,y,m,g1"
	},
	"edit, ei, else, end, ent, env, eof, erase, erl, err, error, every gosub, exp": {
		"96,20,1E,14,00": "EDIT 20",
		"DC ": "EI",
		"01,97": "ELSE",
		"01,97,20,1E,0A,00": "ELSE 10",
		"01,97,61,3D,37": "ELSE a=7",
		"98 ": "END",
		"99,20,0F": "ENT 1",
		"99,20,0F,2C,10,2C,0D,00,00,E1,2C,12": "ENT 1,2,a,4",
		"99,20,0D,00,00,6E,75,ED,2C,0D,00,00,73,74,65,70,F3,2C,0D,00,00,64,69,73,F4,2C,0D,00,00,74,E9,2C,0D,00,00,73,74,65,70,73,B2,2C,0D,00,00,64,69,73,74,B2,2C,0D,00,00,74,69,B2": "ENT num,steps,dist,ti,steps2,dist2,ti2",
		"99,20,0D,00,00,6E,75,ED,2C,EF,0D,00,00,70,65,72,69,6F,E4,2C,0D,00,00,74,E9,2C,EF,0D,00,00,70,65,72,69,6F,64,B2,2C,0D,00,00,74,69,B2": "ENT num,=period,ti,=period2,ti2",
		"9A,20,0F": "ENV 1",
		"9A,20,0F,2C,10,2C,0D,00,00,E1,2C,12": "ENV 1,2,a,4",
		"9A,20,0D,00,00,6E,75,ED,2C,0D,00,00,73,74,65,70,F3,2C,0D,00,00,64,69,73,F4,2C,0D,00,00,74,E9,2C,0D,00,00,73,74,65,70,73,B2,2C,0D,00,00,64,69,73,74,B2,2C,0D,00,00,74,69,B2": "ENV num,steps,dist,ti,steps2,dist2,ti2",
		"9A,20,0D,00,00,6E,75,ED,2C,EF,0D,00,00,72,65,E7,2C,0D,00,00,70,65,72,69,6F,E4,2C,EF,0D,00,00,72,65,67,B2,2C,0D,00,00,70,65,72,69,6F,64,B2": "ENV num,=reg,period,=reg2,period2",
		"0D,00,00,E1,EF,FF,40": "a=EOF",
		"9B,20,0D,00,00,E1": "ERASE a",
		"9B,20,03,00,00,E2": "ERASE b$",
		"9B,20,0D,00,00,E1,2C,03,00,00,E2,2C,04,00,00,E3,2C,02,00,00,E4": "ERASE a,b$,c!,d%",
		//"BasicParser: Expected variable in 1 at pos 8-9: 5": "1 erase 5",
		"0D,00,00,E1,EF,E3": "a=ERL",
		"0D,00,00,E1,EF,FF,41": "a=ERR",
		"9C,20,15": "ERROR 7",
		"9C,20,13,F4,0D,00,00,E1": "ERROR 5+a",
		"L,0F,00,0A,00,9D,20,19,32,20,9F,20,1E,0A,00,00,00,00": "10 EVERY 50 GOSUB 10",
		"L,15,00,0A,00,9D,20,1F,9A,99,99,49,85,2C,0F,20,9F,20,1E,0A,00,00,00,00": "10 EVERY 25.2,1 GOSUB 10",
		"L,19,00,0A,00,9D,20,19,0A,F4,0D,00,00,E1,2C,0D,00,00,E2,20,9F,20,1E,0A,00,00,00,00": "10 EVERY 10+a,b GOSUB 10",
		"0D,00,00,E1,EF,FF,07,28,1F,33,33,33,13,82,29": "a=EXP(2.3)"
	},
	"fill, fix, fn, for, frame, fre": {
		"DD,20,15": "FILL 7",
		"0D,00,00,E1,EF,FF,08,28,1F,33,33,33,13,82,29": "a=FIX(2.3)",
		"0D,00,00,F8,EF,E4,0D,00,00,63,6C,EB": "x=FNclk",
		"0D,00,00,F8,EF,E4,0D,00,00,63,6C,EB,28,0D,00,00,E1,29": "x=FNclk(a)",
		"0D,00,00,F8,EF,E4,0D,00,00,63,6C,EB,28,0D,00,00,E1,2C,0D,00,00,E2,29": "x=FNclk(a,b)",
		"03,00,00,F8,EF,E4,03,00,00,63,6C,EB,28,03,00,00,E1,2C,03,00,00,E2,29": "x$=FNclk$(a$,b$)",
		"0D,00,00,F8,EF,E4,20,0D,00,00,63,6C,EB": "x=FN clk",
		"0D,00,00,F8,EF,E4,20,0D,00,00,63,6C,EB,28,0D,00,00,E1,29": "x=FN clk(a)",
		"0D,00,00,F8,EF,E4,20,0D,00,00,63,6C,EB,28,0D,00,00,E1,2C,0D,00,00,E2,29": "x=FN clk(a,b)",
		"03,00,00,F8,EF,E4,20,03,00,00,63,6C,EB,28,03,00,00,E1,2C,03,00,00,E2,29": "x$=FN clk$(a$,b$)",
		"9E,20,0D,00,00,E1,EF,0F,20,EC,20,19,0A": "FOR a=1 TO 10",
		"9E,20,02,00,00,E1,EF,1F,00,00,00,40,81,20,EC,20,1F,00,00,00,18,84": "FOR a%=1.5 TO 9.5",
		"9E,20,04,00,00,E1,EF,1F,00,00,00,40,81,20,EC,20,1F,00,00,00,18,84": "FOR a!=1.5 TO 9.5",
		"9E,20,0D,00,00,E1,EF,0F,20,EC,20,19,0A,20,E6,20,11": "FOR a=1 TO 10 STEP 3",
		"9E,20,0D,00,00,E1,EF,13,F4,0D,00,00,E2,20,EC,20,F5,12,20,E6,20,F5,1F,33,33,33,13,82": "FOR a=5+b TO -4 STEP -2.3",
		"9E,20,0D,00,00,E1,EF,0D,00,00,E2,20,EC,20,0D,00,00,E3,20,E6,20,0D,00,00,E4": "FOR a=b TO c STEP d",
		"9E,20,0D,00,00,E1,EF,02,00,00,E2,20,EC,20,02,00,00,E3": "FOR a=b% TO c%",
		"9E,20,0D,00,00,E1,EF,0F,20,EC,20,0F,20,E6,20,0E": "FOR a=1 TO 1 STEP 0",
		"9E,20,0D,00,00,E1,EF,0D,00,00,E2,20,EC,20,0D,00,00,E3,20,E6,20,0D,00,00,F3": "FOR a=b TO c STEP s",
		"9E,20,0D,00,00,E1,EF,0F,20,EC,20,10,20,E6,20,0E": "FOR a=1 TO 2 STEP 0",
		"9E,20,0D,00,00,E1,EF,F5,0F,20,EC,20,F5,10,20,E6,20,0E": "FOR a=-1 TO -2 STEP 0",
		"L,11,00,01,00,9E,20,03,00,00,E1,EF,0F,20,EC,20,10,00,00,00": "1 FOR a$=1 TO 2",
		"8E,20,61,01,9E,20,0D,00,00,61,62,E3,EF,0F,20,EC,20,19,0A,20,E6,20,11,01,B0,20,0D,00,00,61,62,E3": "DEFINT a:FOR abc=1 TO 10 STEP 3:NEXT abc",
		"90,20,61,01,9E,20,0D,00,00,61,62,E3,EF,0F,20,EC,20,19,0A,20,E6,20,11,01,B0,20,0D,00,00,61,62,E3": "DEFSTR a:FOR abc=1 TO 10 STEP 3:NEXT abc",
		"9E,20,0D,00,00,E1,EF,0D,00,00,E2,20,EC,20,0D,00,00,E3,20,E6,20,0D,00,00,F3,01,8E,20,61,2D,62,01,0D,00,00,E1,EF,0E,01,8F,20,61,01,B0": "FOR a=b TO c STEP s:DEFINT a-b:a=0:DEFREAL a:NEXT",
		"E0 ": "FRAME",
		"0D,00,00,E1,EF,FF,09,28,0E,29": "a=FRE(0)",
		"0D,00,00,E1,EF,FF,09,28,22,22,29": 'a=FRE("")',
		"0D,00,00,E1,EF,FF,09,28,0D,00,00,E2,F5,10,29": "a=FRE(b-2)",
		"0D,00,00,E1,EF,FF,09,28,03,00,00,E1,29": "a=FRE(a$)"
	},
	"gosub, goto, graphics paper, graphics pen": {
		"L,0A,00,0A,00,9F,20,1E,0A,00,00,00,00": "10 GOSUB 10",
		//"BasicParser: Expected line number in 1 at pos 8-9: a": "1 gosub a",
		"L,0A,00,0A,00,A0,20,1E,0A,00,00,00,00": "10 GOTO 10",
		//"BasicParser: Expected line number in 1 at pos 7-8: a": "1 goto a",
		"DE,20,BA,20,13": "GRAPHICS PAPER 5",
		"DE,20,BA,20,1F,33,33,33,13,82,F6,0D,00,00,E1": "GRAPHICS PAPER 2.3*a",
		"DE,20,BB,20,13": "GRAPHICS PEN 5",
		"DE,20,BB,20,13,2C,0F": "GRAPHICS PEN 5,1",
		"DE,20,BB,20,2C,0E": "GRAPHICS PEN ,0",
		"DE,20,BB,20,1F,33,33,33,13,82,F6,0D,00,00,E1,2C,0F,F4,0D,00,00,E2": "GRAPHICS PEN 2.3*a,1+b"
	},
	"hex$, himem": {
		"03,00,00,E1,EF,FF,73,28,19,10,29": "a$=HEX$(16)",
		"03,00,00,E1,EF,FF,73,28,19,10,2C,12,29": "a$=HEX$(16,4)",
		"03,00,00,E1,EF,FF,73,28,0D,00,00,E1,2C,0D,00,00,E2,29": "a$=HEX$(a,b)",
		"0D,00,00,E1,EF,FF,42": "a=HIMEM"
	},
	"if, ink, inkey, inkey$, inp, input, instr, int": {
		"A1,20,0D,00,00,E1,EF,0F,20,EB,20,0D,00,00,E1,EF,10": "IF a=1 THEN a=2",
		"A1,20,0D,00,00,E1,EF,0F,20,EB,20,0D,00,00,E1,EF,10,20,01,97,20,0D,00,00,E1,EF,0F": "IF a=1 THEN a=2 ELSE a=1",
		"A1,20,0D,00,00,E1,EF,0F,20,EB": "IF a=1 THEN",
		"A1,20,0D,00,00,E1,EF,0F,20,EB,20,01,97": "IF a=1 THEN ELSE",
		"A1,20,0D,00,00,E1,EF,0F,20,EB,20,0D,00,00,E1,EF,10,20,01,97": "IF a=1 THEN a=2 ELSE",
		"A1,20,0D,00,00,E1,EF,0F,20,EB,20,01,97,20,0D,00,00,E1,EF,0F": "IF a=1 THEN ELSE a=1",
		"A1,20,0D,00,00,E1,EF,0F,20,EB,20,A1,20,0D,00,00,E2,EF,0F,20,EB,20,01,97,20,01,97,20,0D,00,00,E1,EF,0F": "IF a=1 THEN IF b=1 THEN ELSE ELSE a=1",
		"L,15,00,0A,00,A1,20,0D,00,00,E1,EF,0F,20,EB,20,A0,20,1E,0A,00,00,00,00": "10 IF a=1 THEN GOTO 10",
		"L,13,00,0A,00,A1,20,0D,00,00,E1,EF,0F,20,EB,20,1E,0A,00,00,00,00": "10 IF a=1 THEN 10",
		"L,13,00,0A,00,A1,20,0D,00,00,E1,EF,0F,20,A0,20,1E,0A,00,00,00,00": "10 IF a=1 GOTO 10",
		"L,21,00,0A,00,A1,20,0D,00,00,E1,EF,0F,20,EB,20,0D,00,00,E1,EF,0D,00,00,E1,F4,0F,01,A0,20,1E,0A,00,00,00,00": "10 IF a=1 THEN a=a+1:GOTO 10",
		"L,15,00,0A,00,A1,20,0D,00,00,E1,EF,0F,20,EB,20,9F,20,1E,0A,00,00,00,00": "10 IF a=1 THEN GOSUB 10",
		"L,22,00,0A,00,A1,20,0D,00,00,E1,EF,0F,20,EB,20,1E,0A,00,01,0D,00,00,E1,EF,0D,00,00,6E,65,76,65,72,B1,00,00,00": "10 IF a=1 THEN 10:a=never1",
		"L,1A,00,0A,00,A1,20,0D,00,00,E1,EF,0F,20,EB,20,1E,0A,00,20,01,97,20,1E,14,00,00,06,00,14,00,C5,00,00,00": "10 IF a=1 THEN 10 ELSE 20\n20 REM",
		"L,1C,00,0A,00,A1,20,0D,00,00,E1,EF,0F,20,EB,20,1E,0A,00,20,01,97,20,A0,20,1E,14,00,00,06,00,14,00,C5,00,00,00": "10 IF a=1 THEN 10 ELSE GOTO 20\n20 REM",
		"L,41,00,0A,00,A1,20,0D,00,00,E1,EF,0D,00,00,E2,F4,13,F6,0D,00,00,E3,20,EB,20,0D,00,00,E1,EF,0D,00,00,E1,F4,0F,01,20,A0,20,1E,0A,00,20,01,97,20,0D,00,00,E1,EF,0D,00,00,E1,F5,0F,01,A0,20,1E,14,00,00,06,00,14,00,C5,00,00,00": "10 IF a=b+5*c THEN a=a+1: GOTO 10 ELSE a=a-1:GOTO 20\n20 REM",
		"L,13,00,0A,00,A1,20,02,00,00,E1,F2,11,20,EB,20,1E,0A,00,00,00,00": "10 IF a%<>3 THEN 10",
		"L,15,00,0A,00,A1,20,03,00,00,E1,F2,22,33,22,20,EB,20,1E,0A,00,00,00,00": '10 IF a$<>"3" THEN 10',
		"A2,20,10,2C,19,13": "INK 2,19",
		"A2,20,10,2C,19,13,2C,19,16": "INK 2,19,22",
		"A2,20,0D,00,00,E1,F6,10,2C,0D,00,00,E2,F5,0F,2C,0D,00,00,E3": "INK a*2,b-1,c",
		"0D,00,00,E1,EF,FF,0A,28,0E,29": "a=INKEY(0)",
		"03,00,00,E1,EF,FF,43": "a$=INKEY$",
		"0D,00,00,E1,EF,FF,0B,28,1C,77,FF,29": "a=INP(&FF77)",
		"A3,20,03,00,00,E1": "INPUT a$",
		"A3,20,03,00,00,E1,2C,0D,00,00,E2": "INPUT a$,b",
		"A3,20,3B,03,00,00,E1,2C,0D,00,00,E2": "INPUT ;a$,b",
		"A3,20,22,70,61,72,61,22,2C,03,00,00,E1,2C,0D,00,00,E2": 'INPUT "para",a$,b',
		"A3,20,22,70,61,72,61,22,3B,03,00,00,E1,2C,0D,00,00,E2": 'INPUT "para";a$,b',
		"A3,20,3B,22,70,61,72,61,20,6E,6F,43,52,4C,46,22,3B,03,00,00,E1,2C,0D,00,00,E2": 'INPUT ;"para noCRLF";a$,b',
		"A3,23,10,2C,3B,22,70,61,72,61,20,6E,6F,43,52,4C,46,22,3B,03,00,00,E1,2C,0D,00,00,E2": 'INPUT#2,;"para noCRLF";a$,b',
		"A3,23,0D,00,00,73,74,72,65,61,ED,2C,3B,22,73,74,72,69,6E,67,22,3B,03,00,00,E1,2C,0D,00,00,E2": 'INPUT#stream,;"string";a$,b',
		"0D,00,00,E1,EF,FF,74,28,22,6B,65,79,22,2C,22,65,79,22,29": 'a=INSTR("key","ey")',
		"0D,00,00,E1,EF,FF,74,28,03,00,00,F3,2C,03,00,00,66,69,6E,E4,29": "a=INSTR(s$,find$)",
		"0D,00,00,E1,EF,FF,74,28,0D,00,00,73,74,61,72,F4,2C,03,00,00,F3,2C,03,00,00,66,69,6E,E4,29": "a=INSTR(start,s$,find$)",
		"0D,00,00,E1,EF,FF,0C,28,F5,1F,33,33,33,13,82,29": "a=INT(-2.3)",
		"0D,00,00,E1,EF,FF,0C,28,0D,00,00,E2,F4,1F,33,33,33,13,82,29": "a=INT(b+2.3)"
	},
	joy: {
		"0D,00,00,E1,EF,FF,0D,28,0E,29": "a=JOY(0)",
		"0D,00,00,E1,EF,FF,0D,28,0D,00,00,E2,F4,0F,29": "a=JOY(b+1)"
	},
	"key, key def": {
		"A4,20,19,0B,2C,22,62,6F,72,64,65,72,20,31,33,3A,70,61,70,65,72,20,30,22": 'KEY 11,"border 13:paper 0"',
		"A4,20,0D,00,00,E1,2C,03,00,00,E2": "KEY a,b$",
		"A4,20,8D,20,19,44,2C,0F": "KEY DEF 68,1",
		"A4,20,8D,20,19,44,2C,0F,2C,19,9F": "KEY DEF 68,1,159",
		"A4,20,8D,20,19,44,2C,0F,2C,19,9F,2C,19,A0": "KEY DEF 68,1,159,160",
		"A4,20,8D,20,19,44,2C,0F,2C,19,9F,2C,19,A0,2C,19,A1": "KEY DEF 68,1,159,160,161",
		"A4,20,8D,20,0D,00,00,6E,75,ED,2C,0D,00,00,66,69,72,E5,2C,0D,00,00,6E,6F,72,6D,61,EC,2C,0D,00,00,73,68,69,66,F4,2C,0D,00,00,63,74,72,EC": "KEY DEF num,fire,normal,shift,ctrl"
	},
	"left$, len, let, line input, list, load, locate, log, log10, lower$": {
		"03,00,00,E1,EF,FF,75,28,03,00,00,E2,2C,0D,00,00,EE,29": "a$=LEFT$(b$,n)",
		"0D,00,00,E1,EF,FF,0E,28,03,00,00,E1,29": "a=LEN(a$)",
		"A5,20,0D,00,00,E1,EF,0D,00,00,E1,F4,0F": "LET a=a+1",
		"A6,20,A3,20,03,00,00,E1": "LINE INPUT a$",
		"A6,20,A3,20,3B,03,00,00,E1": "LINE INPUT ;a$",
		"A6,20,A3,20,22,70,61,72,61,22,2C,03,00,00,E1": 'LINE INPUT "para",a$',
		"A6,20,A3,20,22,70,61,72,61,22,3B,03,00,00,E1": 'LINE INPUT "para";a$',
		"A6,20,A3,20,3B,22,70,61,72,61,20,6E,6F,43,52,4C,46,22,3B,03,00,00,E1": 'LINE INPUT ;"para noCRLF";a$',
		"A6,20,A3,23,10,2C,3B,22,70,61,72,61,20,6E,6F,43,52,4C,46,22,3B,03,00,00,E1": 'LINE INPUT#2,;"para noCRLF";a$',
		"A6,20,A3,23,0D,00,00,73,74,72,65,61,ED,2C,3B,22,73,74,72,69,6E,67,22,3B,03,00,00,E1": 'LINE INPUT#stream,;"string";a$',
		"A7 ": "LIST",
		"A7,20,F5": "LIST -",
		"A7,20,2C": "LIST ,",
		"A7,20,F5,2C": "LIST -,",
		"A7,20,1E,0A,00": "LIST 10",
		"A7,20,1E,01,00,F5": "LIST 1-",
		"A7,20,F5,1E,01,00": "LIST -1",
		"A7,20,1E,01,00,F5,1E,02,00": "LIST 1-2",
		"A7,20,23,11": "LIST #3",
		"A7,20,2C,23,11": "LIST ,#3",
		"A7,20,1E,0A,00,2C,23,11": "LIST 10,#3",
		"A7,20,1E,01,00,F5,2C,23,11": "LIST 1-,#3",
		"A7,20,F5,1E,01,00,2C,23,11": "LIST -1,#3",
		"A7,20,1E,01,00,F5,1E,02,00,2C,23,11": "LIST 1-2,#3",
		//"BasicParser: Expected end of arguments at pos 0-4: list": "list a",
		"A8,20,22,66,69,6C,65,22": 'LOAD "file"',
		"A8,20,22,66,69,6C,65,2E,73,63,72,22,2C,1C,00,C0": 'LOAD "file.scr",&C000',
		"A8,20,03,00,00,E6,2C,0D,00,00,61,64,F2": "LOAD f$,adr",
		"A9,20,19,0A,2C,19,14": "LOCATE 10,20",
		"A9,23,10,2C,19,0A,2C,19,14": "LOCATE#2,10,20",
		"A9,23,0D,00,00,73,74,72,65,61,ED,2C,0D,00,00,F8,2C,0D,00,00,F9": "LOCATE#stream,x,y",
		"0D,00,00,E1,EF,FF,0F,28,19,0A,29": "a=LOG(10)",
		"0D,00,00,E1,EF,FF,10,28,19,0A,29": "a=LOG10(10)",
		"03,00,00,E1,EF,FF,11,28,03,00,00,E2,29": "a$=LOWER$(b$)",
		"03,00,00,E1,EF,FF,11,28,22,53,74,72,69,6E,67,22,29": 'a$=LOWER$("String")'
	},
	"mask, max, memory, merge, mid$, min, mod, mode, move, mover": {
		"DF,20,1B,AB,00": "MASK &X10101011",
		"DF,20,10,F8,28,16,F5,0D,00,00,F8,29,2C,0F": "MASK 2^(8-x),1",
		"DF,20,0D,00,00,E1,2C,0D,00,00,E2": "MASK a,b",
		"DF,20,2C,0D,00,00,E2": "MASK ,b",
		"0D,00,00,E1,EF,FF,76,28,0F,29": "a=MAX(1)",
		"0D,00,00,E1,EF,FF,76,28,0F,2C,13,29": "a=MAX(1,5)",
		"0D,00,00,E1,EF,FF,76,28,0D,00,00,E2,2C,0D,00,00,E3,2C,0D,00,00,E4,29": "a=MAX(b,c,d)",
		"03,00,00,E1,EF,FF,76,28,22,61,62,63,22,29": 'a$=MAX("abc")',
		"L,17,00,01,00,03,00,00,E1,EF,FF,76,28,22,61,62,63,22,2C,22,64,22,29,00,00,00": '1 a$=MAX("abc","d")',
		"AA,20,1C,FF,3F": "MEMORY &3FFF",
		"AA,20,0D,00,00,61,64,F2": "MEMORY adr",
		"AB,20,22,66,69,6C,65,22": 'MERGE "file"',
		"AB,20,03,00,00,E6": "MERGE f$",
		"03,00,00,E1,EF,AC,28,22,73,74,72,69,6E,67,22,2C,11,29": 'a$=MID$("string",3)',
		"03,00,00,E1,EF,AC,28,22,73,74,72,69,6E,67,22,2C,11,2C,10,29": 'a$=MID$("string",3,2)',
		"03,00,00,E1,EF,AC,28,03,00,00,E2,2C,0D,00,00,F0,29": "a$=MID$(b$,p)",
		"03,00,00,E1,EF,AC,28,03,00,00,E2,2C,0D,00,00,F0,2C,0D,00,00,6C,E7,29": "a$=MID$(b$,p,lg)",
		"AC,28,03,00,00,E1,2C,10,29,EF,03,00,00,E2": "MID$(a$,2)=b$",
		"AC,28,03,00,00,E1,2C,10,2C,10,29,EF,03,00,00,E2": "MID$(a$,2,2)=b$",
		"AC,28,03,00,00,E1,2C,02,00,00,E2,2C,04,00,00,E3,29,EF,22,73,74,72,69,6E,67,22": 'MID$(a$,b%,c!)="string"',
		"0D,00,00,E1,EF,FF,77,28,0F,29": "a=MIN(1)",
		"0D,00,00,E1,EF,FF,77,28,0F,2C,13,29": "a=MIN(1,5)",
		"0D,00,00,E1,EF,FF,77,28,0D,00,00,E2,2C,0D,00,00,E3,2C,0D,00,00,E4,29": "a=MIN(b,c,d)",
		"03,00,00,E1,EF,FF,77,28,22,61,62,63,22,29": 'a$=MIN("abc")',
		"L,17,00,01,00,03,00,00,E1,EF,FF,77,28,22,61,62,63,22,2C,22,64,22,29,00,00,00": '1 a$=MIN("abc","d")',
		"0D,00,00,E1,EF,19,0A,20,FB,20,11": "a=10 MOD 3",
		"0D,00,00,E1,EF,0D,00,00,E2,20,FB,20,F5,0D,00,00,E3": "a=b MOD -c",
		"AD,20,0E": "MODE 0",
		"AD,20,0D,00,00,EE,F4,0F": "MODE n+1",
		"AE,20,19,0A,2C,19,14": "MOVE 10,20",
		"AE,20,F5,19,0A,2C,F5,19,14,2C,15": "MOVE -10,-20,7",
		"AE,20,19,0A,2C,19,14,2C,15,2C,11": "MOVE 10,20,7,3",
		"AE,20,19,0A,2C,19,14,2C,2C,11": "MOVE 10,20,,3",
		"AE,20,0D,00,00,F8,2C,0D,00,00,F9,2C,0D,00,00,ED,2C,0D,00,00,67,B1": "MOVE x,y,m,g1",
		"AF,20,19,0A,2C,19,14": "MOVER 10,20",
		"AF,20,F5,19,0A,2C,F5,19,14,2C,15": "MOVER -10,-20,7",
		"AF,20,19,0A,2C,19,14,2C,15,2C,11": "MOVER 10,20,7,3",
		"AF,20,19,0A,2C,19,14,2C,2C,11": "MOVER 10,20,,3",
		"AF,20,0D,00,00,F8,2C,0D,00,00,F9,2C,0D,00,00,ED,2C,0D,00,00,67,B1": "MOVER x,y,m,g1"
	},
	"new, next, not": {
		"B1 ": "NEW",
		"9E,20,0D,00,00,E1,EF,0F,20,EC,20,10,01,20,B0": "FOR a=1 TO 2: NEXT",
		"9E,20,0D,00,00,E9,EF,0F,20,EC,20,10,01,20,B0,20,0D,00,00,E9": "FOR i=1 TO 2: NEXT i",
		"9E,20,0D,00,00,EA,EF,0F,20,EC,20,10,01,9E,20,0D,00,00,E9,EF,11,20,EC,20,12,01,20,B0,20,0D,00,00,E9,2C,0D,00,00,EA": "FOR j=1 TO 2:FOR i=3 TO 4: NEXT i,j",
		"0D,00,00,E1,EF,FE,20,10": "a=NOT 2",
		"0D,00,00,E1,EF,FE,20,F5,0D,00,00,E2": "a=NOT -b"
	},
	"on break ..., on error goto, on gosub, on goto, on sq gosub, openin, openout, or, origin, out": {
		"B3,20,8B": "ON BREAK CONT",
		"L,0C,00,0A,00,B3,20,9F,20,1E,0A,00,00,00,00": "10 ON BREAK GOSUB 10",
		"B3,20,CE": "ON BREAK STOP",
		"L,06,00,0A,00,B4,00,00,00": "10 ON ERROR GOTO 0",
		"L,0C,00,0A,00,B2,9C,A0,20,1E,0A,00,00,00,00": "10 ON ERROR GOTO 10",
		//"BasicParser: Expected string in 1 at pos 24-25: 0": "1 on error goto 0:a=asc(0)",
		"L,17,00,01,00,B2,9C,A0,20,1E,02,00,01,0D,00,00,E1,EF,FF,01,28,0E,29,00,06,00,02,00,C5,00,00,00": "1 ON ERROR GOTO 2:a=ASC(0)\n2 REM",
		//"BasicParser: Expected number in 1 at pos 25-26: A": '1 on error goto 0:?chr$("A")',
		"L,15,00,01,00,B2,9C,A0,20,1E,02,00,01,BF,FF,03,28,22,41,22,29,00,06,00,02,00,C5,00,00,00": '1 ON ERROR GOTO 2:PRINT CHR$("A")\n2 REM',
		//"BasicParser: Expected number in 1 at pos 26-28: b$": '1 on error goto 0:a$=dec$(b$,"\\    \\")',
		"L,23,00,01,00,B2,9C,A0,20,1E,02,00,01,03,00,00,E1,EF,FF,72,28,03,00,00,E2,2C,22,5C,20,20,20,20,5C,22,29,00,06,00,02,00,C5,00,00,00": '1 ON ERROR GOTO 2:a$=DEC$(b$,"\\    \\")\n2 REM',
		//"BasicParser: Operand missing in 1 at pos 23-24: ,": "1 on error goto 0:mask ,",
		"L,10,00,01,00,B2,9C,A0,20,1E,02,00,01,DF,20,2C,00,06,00,02,00,C5,00,00,00": "1 ON ERROR GOTO 2:MASK ,\n2 REM",
		"L,0E,00,0A,00,B2,20,0F,20,9F,20,1E,0A,00,00,00,00": "10 ON 1 GOSUB 10",
		"L,15,00,0A,00,B2,20,0D,00,00,F8,20,9F,20,1E,0A,00,2C,1E,14,00,00,06,00,14,00,C5,00,00,00": "10 ON x GOSUB 10,20\n20 REM",
		"L,1B,00,0A,00,B2,20,0D,00,00,F8,F4,0F,20,9F,20,1E,0A,00,2C,1E,14,00,2C,1E,14,00,00,06,00,14,00,C5,00,00,00": "10 ON x+1 GOSUB 10,20,20\n20 REM",
		"L,0E,00,0A,00,B2,20,0F,20,A0,20,1E,0A,00,00,00,00": "10 ON 1 GOTO 10",
		"L,15,00,0A,00,B2,20,0D,00,00,F8,20,A0,20,1E,0A,00,2C,1E,14,00,00,06,00,14,00,C5,00,00,00": "10 ON x GOTO 10,20\n20 REM",
		"L,1B,00,0A,00,B2,20,0D,00,00,F8,F4,0F,20,A0,20,1E,0A,00,2C,1E,14,00,2C,1E,14,00,00,06,00,14,00,C5,00,00,00": "10 ON x+1 GOTO 10,20,20\n20 REM",
		"L,0F,00,0A,00,B5,28,0F,29,20,9F,20,1E,0A,00,00,00,00": "10 ON SQ(1) GOSUB 10",
		"L,18,00,0A,00,B5,28,0D,00,00,63,68,61,6E,6E,65,EC,29,20,9F,20,1E,0A,00,00,00,00": "10 ON SQ(channel) GOSUB 10",
		"B6,20,22,66,69,6C,65,22": 'OPENIN "file"',
		"B6,20,03,00,00,E6": "OPENIN f$",
		"B7,20,22,66,69,6C,65,22": 'OPENOUT "file"',
		"B7,20,03,00,00,E6": "OPENOUT f$",
		"0D,00,00,E1,EF,0F,20,FC,20,1C,A0,01": "a=1 OR &1A0",
		"0D,00,00,E1,EF,0D,00,00,E2,20,FC,20,0D,00,00,E3": "a=b OR c",
		"B8,20,19,0A,2C,19,14": "ORIGIN 10,20",
		"B8,20,19,0A,2C,19,14,2C,13,2C,19,C8,2C,19,32,2C,19,0F": "ORIGIN 10,20,5,200,50,15",
		"B8,20,0D,00,00,F8,2C,0D,00,00,F9,2C,0D,00,00,6C,65,66,F4,2C,0D,00,00,72,69,67,68,F4,2C,0D,00,00,74,6F,F0,2C,0D,00,00,62,6F,74,74,6F,ED": "ORIGIN x,y,left,right,top,bottom",
		"B9,20,1C,12,BC,2C,1C,12,00": "OUT &BC12,&12",
		"B9,20,0D,00,00,61,64,F2,2C,0D,00,00,62,F9": "OUT adr,by"
	},
	"paper, peek, pen, pi, plot, plotr, poke, pos, print": {
		"BA,20,10": "PAPER 2",
		"BA,23,0D,00,00,73,74,72,65,61,ED,2C,0D,00,00,F0": "PAPER#stream,p",
		"0D,00,00,E1,EF,FF,12,28,1C,00,C0,29": "a=PEEK(&C000)",
		"0D,00,00,E1,EF,FF,12,28,0D,00,00,61,64,F2,F4,13,29": "a=PEEK(adr+5)",
		"BB,20,10": "PEN 2",
		"BB,20,10,2C,0F": "PEN 2,1",
		"BB,23,11,2C,10,2C,0F": "PEN#3,2,1",
		"BB,23,0D,00,00,73,74,72,65,61,ED,2C,0D,00,00,F0,2C,0D,00,00,74,72,61,6E,F3": "PEN#stream,p,trans",
		"0D,00,00,E1,EF,FF,44": "a=PI",
		"BC,20,19,0A,2C,19,14": "PLOT 10,20",
		"BC,20,F5,19,0A,2C,F5,19,14,2C,15": "PLOT -10,-20,7",
		"BC,20,19,0A,2C,19,14,2C,15,2C,11": "PLOT 10,20,7,3",
		"BC,20,19,0A,2C,19,14,2C,2C,11": "PLOT 10,20,,3",
		"BC,20,0D,00,00,F8,2C,0D,00,00,F9,2C,0D,00,00,ED,2C,0D,00,00,67,B1": "PLOT x,y,m,g1",
		"BD,20,19,0A,2C,19,14": "PLOTR 10,20",
		"BD,20,F5,19,0A,2C,F5,19,14,2C,15": "PLOTR -10,-20,7",
		"BD,20,19,0A,2C,19,14,2C,15,2C,11": "PLOTR 10,20,7,3",
		"BD,20,19,0A,2C,19,14,2C,2C,11": "PLOTR 10,20,,3",
		"BD,20,0D,00,00,F8,2C,0D,00,00,F9,2C,0D,00,00,ED,2C,0D,00,00,67,B1": "PLOTR x,y,m,g1",
		"BE,20,1C,00,C0,2C,19,17": "POKE &C000,23",
		"BE,20,0D,00,00,61,64,F2,2C,0D,00,00,62,F9": "POKE adr,by",
		"0D,00,00,E1,EF,FF,78,28,23,0E,29": "a=POS(#0)",
		"0D,00,00,E1,EF,FF,78,28,23,0D,00,00,73,74,72,65,61,ED,29": "a=POS(#stream)",
		"BF ": "PRINT",
		"BF,20,2C": "PRINT ,",
		"BF,20,3B": "PRINT ;",
		"BF,20,23,10": "PRINT #2",
		"BF,20,23,10,2C": "PRINT #2,",
		"BF,20,22,73,74,72,69,6E,67,22": 'PRINT "string"',
		"BF,20,1F,FC,27,6B,6E,9E,3B": "PRINT 999999999;",
		"BF,20,1F,00,28,6B,6E,9E,3B": "PRINT 1E+09;",
		"BF,20,1F,40,B7,43,3A,A3,3B": "PRINT 2.5E+10;",
		"BF,20,1F,B6,51,06,1E,81,3B": "PRINT 1.23456785;",
		"BF,20,03,00,00,E1": "PRINT a$",
		"BF,20,03,00,00,E1,2C,0D,00,00,E2": "PRINT a$,b",
		"BF,23,10,2C,03,00,00,E1,2C,0D,00,00,E2": "PRINT#2,a$,b",
		"BF,20,ED,22,23,23,23,23,22,3B,0D,00,00,72,E9,3B": 'PRINT USING"####";ri;',
		"BF,20,ED,20,22,23,23,2E,23,23,22,3B,F5,1F,9A,99,99,19,81": 'PRINT USING "##.##";-1.2',
		"BF,20,ED,22,23,23,23,20,23,23,23,23,23,23,23,23,22,3B,0D,00,00,E1,2C,0D,00,00,E2": 'PRINT USING"### ########";a,b',
		"BF,20,ED,20,22,5C,20,20,20,5C,22,3B,22,6E,31,22,3B,22,6E,32,22,3B,22,20,78,78,33,22,3B": 'PRINT USING "\\   \\";"n1";"n2";" xx3";',
		"BF,20,ED,20,22,21,22,3B,22,61,31,22,3B,22,61,32,22,3B": 'PRINT USING "!";"a1";"a2";',
		"BF,20,ED,20,22,26,22,3B,22,61,31,22,3B,22,61,32,22,3B": 'PRINT USING "&";"a1";"a2";',
		"BF,23,17,2C,EA,28,0D,00,00,F4,29,3B,03,00,00,F4,3B,0D,00,00,E9,3B,22,68,31,22": 'PRINT#9,TAB(t);t$;i;"h1"',
		//"BF ": "?",
		"BF,23,10,2C,0D,00,00,74,E9,F5,04,00,00,74,B0,3B,E5,28,13,29,3B": "PRINT#2,ti-t0!;SPC(5);"
	},
	"rad, randomize, read, release, rem, remain, renum, restore, resume, return, right$, rnd, round, run": {
		"C1 ": "RAD",
		"C2 ": "RANDOMIZE",
		"C2,20,1F,D5,78,E9,76,87": "RANDOMIZE 123.456",
		"C3,20,03,00,00,E1": "READ a$",
		"C3,20,0D,00,00,E2": "READ b",
		"C3,20,03,00,00,E1,2C,0D,00,00,E2,2C,03,00,00,E3": "READ a$,b,c$",
		"C4,20,0F": "RELEASE 1",
		"C4,20,0D,00,00,EE,F4,0F": "RELEASE n+1",
		"C5 ": "REM",
		"C5,20,63,6F,6D,6D,65,6E,74,20,75,6E,74,69,6C,20,45,4F,4C": "REM comment until EOL",
		"C5,20,5C": "REM \\",
		"01,C0": "'",
		"01,C0,63,6F,6D,6D,65,6E,74,20,75,6E,74,69,6C,20,45,4F,4C": "'comment until EOL",
		"01,C0,5C": "'\\",
		"0D,00,00,E1,EF,0F,20,01,C0,63,6F,6D,6D,65,6E,74": "a=1 'comment",
		"0D,00,00,E1,EF,FF,13,28,0E,29": "a=REMAIN(0)",
		"0D,00,00,E1,EF,FF,13,28,0D,00,00,74,E9,29": "a=REMAIN(ti)",
		"C6 ": "RENUM",
		"C6,20,19,64": "RENUM 100",
		"C6,20,19,64,2C,19,32": "RENUM 100,50",
		"C6,20,19,64,2C,19,32,2C,10": "RENUM 100,50,2",
		"C7 ": "RESTORE",
		"L,0A,00,0A,00,C7,20,1E,0A,00,00,00,00": "10 RESTORE 10",
		"C8 ": "RESUME",
		"L,0A,00,0A,00,C8,20,1E,0A,00,00,00,00": "10 RESUME 10",
		"C8,20,B0": "RESUME NEXT",
		"C9 ": "RETURN",
		"03,00,00,E1,EF,FF,79,28,03,00,00,E2,2C,0D,00,00,EE,29": "a$=RIGHT$(b$,n)",
		"0D,00,00,E1,EF,FF,45": "a=RND",
		"0D,00,00,E1,EF,FF,45,28,0E,29": "a=RND(0)",
		"0D,00,00,E1,EF,FF,45,28,F5,0F,F6,0D,00,00,E2,29": "a=RND(-1*b)",
		"0D,00,00,E1,EF,FF,7A,28,1F,D7,A3,70,15,82,29": "a=ROUND(2.335)",
		"0D,00,00,E1,EF,FF,7A,28,1F,D7,A3,70,15,82,2C,10,29": "a=ROUND(2.335,2)",
		"CA ": "RUN",
		"L,0A,00,0A,00,CA,20,1E,0A,00,00,00,00": "10 RUN 10",
		"CA,20,22,66,69,6C,65,22": 'RUN "file"',
		"CA,20,03,00,00,E6": "RUN f$"
	},
	save: {
		"CB,20,22,66,69,6C,65,22": 'SAVE "file"',
		"CB,20,22,66,69,6C,65,22,2C,0D,00,00,F0": 'SAVE "file",p',
		"CB,20,22,66,69,6C,65,22,2C,0D,00,00,E1": 'SAVE "file",a',
		"CB,20,22,66,69,6C,65,2E,73,63,72,22,2C,0D,00,00,E2,2C,1C,00,C0,2C,1C,00,40": 'SAVE "file.scr",b,&C000,&4000',
		"CB,20,22,66,69,6C,65,2E,62,69,6E,22,2C,0D,00,00,E2,2C,1C,00,80,2C,1C,00,01,2C,1C,10,80": 'SAVE "file.bin",b,&8000,&100,&8010',
		"CB,20,03,00,00,E6,2C,0D,00,00,E2,2C,0D,00,00,61,64,F2,2C,0D,00,00,6C,E7,2C,0D,00,00,65,6E,74,72,F9": "SAVE f$,b,adr,lg,entry",
		"0D,00,00,E1,EF,FF,14,28,13,29": "a=SGN(5)",
		"0D,00,00,E1,EF,FF,14,28,0E,29": "a=SGN(0)",
		"0D,00,00,E1,EF,FF,14,28,F5,13,29": "a=SGN(-5)",
		"0D,00,00,E1,EF,FF,15,28,1F,33,33,33,13,82,29": "a=SIN(2.3)",
		"CC,20,0F,2C,19,64": "SOUND 1,100",
		"CC,20,0F,2C,19,64,2C,1A,90,01": "SOUND 1,100,400",
		"CC,20,0F,2C,19,64,2C,1A,90,01,2C,19,0F": "SOUND 1,100,400,15",
		"CC,20,0F,2C,19,64,2C,1A,90,01,2C,19,0F,2C,0F": "SOUND 1,100,400,15,1",
		"CC,20,0F,2C,19,64,2C,1A,90,01,2C,19,0F,2C,0F,2C,0F": "SOUND 1,100,400,15,1,1",
		"CC,20,0F,2C,19,64,2C,1A,90,01,2C,19,0F,2C,0F,2C,0F,2C,12": "SOUND 1,100,400,15,1,1,4",
		"CC,20,0D,00,00,63,E8,2C,0D,00,00,70,65,72,69,6F,E4,2C,0D,00,00,64,75,72,61,74,69,6F,EE,2C,2C,2C,2C,0D,00,00,6E,6F,69,73,E5": "SOUND ch,period,duration,,,,noise",
		"CC,20,0D,00,00,63,E8,2C,0D,00,00,70,65,72,69,6F,E4,2C,0D,00,00,64,75,72,61,74,69,6F,EE,2C,0D,00,00,76,6F,EC,2C,0D,00,00,65,6E,76,B1,2C,0D,00,00,65,6E,74,B1,2C,0D,00,00,6E,6F,69,73,E5": "SOUND ch,period,duration,vol,env1,ent1,noise",
		"03,00,00,E1,EF,FF,16,28,17,29": "a$=SPACE$(9)",
		"03,00,00,E1,EF,FF,16,28,17,F4,0D,00,00,E2,29": "a$=SPACE$(9+b)",
		"CD,20,A2,20,19,0A,2C,13": "SPEED INK 10,5",
		"CD,20,A2,20,0D,00,00,E1,2C,0D,00,00,E2": "SPEED INK a,b",
		"CD,20,A4,20,19,0A,2C,13": "SPEED KEY 10,5",
		"CD,20,A4,20,0D,00,00,E1,2C,0D,00,00,E2": "SPEED KEY a,b",
		"CD,20,D9,20,0F": "SPEED WRITE 1",
		"CD,20,D9,20,0D,00,00,E1,F5,0F": "SPEED WRITE a-1",
		//"BasicParser: Expected INK, KEY or WRITE in 1 at pos 8-12: mode": "1 speed mode 2",
		"0D,00,00,E1,EF,FF,17,28,0F,29": "a=SQ(1)",
		"0D,00,00,E1,EF,FF,17,28,0D,00,00,63,68,61,6E,6E,65,EC,29": "a=SQ(channel)",
		"0D,00,00,E1,EF,FF,18,28,17,29": "a=SQR(9)",
		"CE ": "STOP",
		"03,00,00,E1,EF,FF,19,28,19,7B,29": "a$=STR$(123)",
		"03,00,00,E1,EF,FF,19,28,0D,00,00,E1,F4,0D,00,00,E2,29": "a$=STR$(a+b)",
		"03,00,00,E1,EF,FF,7B,28,19,28,2C,22,2A,22,29": 'a$=STRING$(40,"*")',
		"03,00,00,E1,EF,FF,7B,28,19,28,2C,19,2A,29": "a$=STRING$(40,42)",
		"03,00,00,E1,EF,FF,7B,28,0D,00,00,6C,E7,2C,0D,00,00,63,68,61,F2,29": "a$=STRING$(lg,char)",
		"CF,20,19,FF,2C,0F,2C,10,2C,11,2C,12,2C,13,2C,14,2C,15,2C,1B,B3,00": "SYMBOL 255,1,2,3,4,5,6,7,&X10110011",
		"CF,20,19,FF,2C,0F": "SYMBOL 255,1",
		"CF,20,80,20,19,FF": "SYMBOL AFTER 255"
	},
	"tag, tagoff, tan, test, testr, time, troff, tron": {
		"D0 ": "TAG",
		"D0,23,10": "TAG#2",
		"D0,23,0D,00,00,73,74,72,65,61,ED": "TAG#stream",
		"D1 ": "TAGOFF",
		"D1,23,10": "TAGOFF#2",
		"D1,23,0D,00,00,73,74,72,65,61,ED": "TAGOFF#stream",
		"0D,00,00,E1,EF,FF,1A,28,19,2D,29": "a=TAN(45)",
		"0D,00,00,E1,EF,FF,7C,28,19,0A,2C,19,14,29": "a=TEST(10,20)",
		"0D,00,00,E1,EF,FF,7C,28,0D,00,00,F8,2C,0D,00,00,F9,29": "a=TEST(x,y)",
		"0D,00,00,E1,EF,FF,7D,28,19,0A,2C,F5,19,14,29": "a=TESTR(10,-20)",
		"0D,00,00,E1,EF,FF,7D,28,0D,00,00,78,ED,2C,0D,00,00,79,ED,29": "a=TESTR(xm,ym)",
		"04,00,00,F4,EF,FF,46": "t!=TIME",
		"D2 ": "TROFF",
		"D3 ": "TRON"
	},
	"unt, upper$": {
		"0D,00,00,E1,EF,FF,1B,28,1C,66,FF,29": "a=UNT(&FF66)",
		"03,00,00,E1,EF,FF,1C,28,22,53,74,72,69,6E,67,22,29": 'a$=UPPER$("String")',
		"03,00,00,E1,EF,FF,1C,28,03,00,00,E2,29": "a$=UPPER$(b$)"
	},
	"val, vpos": {
		"0D,00,00,E1,EF,FF,1D,28,22,2D,32,2E,33,22,29": 'a=VAL("-2.3")',
		"0D,00,00,E1,EF,FF,1D,28,03,00,00,E2,29": "a=VAL(b$)",
		"0D,00,00,E1,EF,FF,7F,28,23,0E,29": "a=VPOS(#0)",
		"0D,00,00,E1,EF,FF,7F,28,23,0D,00,00,73,74,72,65,61,ED,29": "a=VPOS(#stream)"
	},
	"wait, wend, while, width, window, window swap, write": {
		"D4,20,1C,34,FF,2C,19,14": "WAIT &FF34,20",
		"D4,20,1C,34,FF,2C,19,14,2C,19,19": "WAIT &FF34,20,25",
		"D6,20,0D,00,00,E1,EF,19,0A,01,20,D5": "WHILE a=10: WEND",
		"D6,20,0D,00,00,E1,EE,0E": "WHILE a>0",
		"D7,20,19,28": "WIDTH 40",
		"D8,20,19,0A,2C,19,1E,2C,13,2C,19,14": "WINDOW 10,30,5,20",
		"D8,23,0F,2C,19,0A,2C,19,1E,2C,13,2C,19,14": "WINDOW#1,10,30,5,20",
		"D8,23,0D,00,00,73,74,72,65,61,ED,2C,0D,00,00,6C,65,66,F4,2C,0D,00,00,72,69,67,68,F4,2C,0D,00,00,74,6F,F0,2C,0D,00,00,62,6F,74,74,6F,ED": "WINDOW#stream,left,right,top,bottom",
		"D8,20,E7,20,0F": "WINDOW SWAP 1",
		"D8,20,E7,20,0F,2C,0E": "WINDOW SWAP 1,0",
		//"BasicParser: Expected number in 1 at pos 14-15: #": "1 window swap #1",
		"D9 ": "WRITE",
		"D9,20,23,10": "WRITE #2",
		"D9,20,23,10,2C": "WRITE #2,",
		"D9,20,22,73,74,72,69,6E,67,22": 'WRITE "string"',
		"D9,20,1F,FC,27,6B,6E,9E": "WRITE 999999999",
		"D9,20,1F,00,28,6B,6E,9E": "WRITE 1E+09",
		"D9,20,1F,40,B7,43,3A,A3": "WRITE 2.5E+10",
		"D9,20,1F,B6,51,06,1E,81": "WRITE 1.23456785",
		"D9,20,03,00,00,E1": "WRITE a$",
		"D9,20,03,00,00,E1,2C,0D,00,00,E2": "WRITE a$,b",
		"D9,23,10,2C,03,00,00,E1,2C,0D,00,00,E2": "WRITE#2,a$,b",
		"D9,23,10,2C,03,00,00,E1,3B,0D,00,00,E2": "WRITE#2,a$;b"
		//"BasicParser: Unexpected token at pos 6-7: ,": "WRITE ,",
		//"BasicParser: Unexpected token at pos 6-7: ;": "WRITE ;"
	},
	"xor, xpos": {
		"0D,00,00,E1,EF,1B,09,00,20,FD,20,1B,06,00": "a=&X1001 XOR &X110",
		"0D,00,00,E1,EF,0D,00,00,E2,20,FD,20,0D,00,00,E3": "a=b XOR c",
		"0D,00,00,E1,EF,FF,47": "a=XPOS"
	},
	ypos: {
		"0D,00,00,E1,EF,FF,48": "a=YPOS"
	},
	zone: {
		"DA,20,19,0D,F4,0D,00,00,EE": "ZONE 13+n"
	},
	rsx: {
		"7C,00,C1": "|A",
		"7C,00,C2": "|B",
		"7C,00,42,41,53,49,C3": "|BASIC",
		"7C,00,43,50,CD": "|CPM",
		"03,00,00,E1,EF,22,2A,2E,64,72,77,22,01,7C,00,44,49,D2,2C,40,03,00,00,E1": 'a$="*.drw":|DIR,@a$',
		"7C,00,44,49,53,C3": "|DISC",
		"7C,00,44,49,53,43,2E,49,CE": "|DISC.IN",
		"7C,00,44,49,53,43,2E,4F,55,D4": "|DISC.OUT",
		"7C,00,44,52,49,56,C5,2C,0E": "|DRIVE,0",
		//"BasicParser: Expected any parameter for , in 1 at pos 9: ": "1 |drive,",
		//"BasicParser: Unexpected stream in 1 at pos 9-10: #": "1 |drive,#1",
		"7C,00,45,52,C1,2C,22,66,69,6C,65,2E,62,61,73,22": '|ERA,"file.bas"',
		"7C,00,52,45,CE,2C,22,66,69,6C,65,31,2E,62,61,73,22,2C,22,66,69,6C,65,32,2E,62,61,73,22": '|REN,"file1.bas","file2.bas"',
		"7C,00,54,41,50,C5": "|TAPE",
		"7C,00,54,41,50,45,2E,49,CE": "|TAPE.IN",
		"7C,00,54,41,50,45,2E,4F,55,D4": "|TAPE.OUT",
		"7C,00,55,53,45,D2,2C,0F": "|USER,1",
		"7C,00,4D,4F,44,C5,2C,11": "|MODE,3",
		"7C,00,52,45,4E,55,CD,2C,0F,2C,10,2C,11,2C,12": "|RENUM,1,2,3,4",
		"7C,80": "|"
	},
	keepSpaces: {
		"L,11,00,01,00,20,85,20,20,20,AB,20,20,22,66,35,22,00,00,00": '1  CHAIN   MERGE  "f5"',
		"L,19,00,01,00,20,8D,20,20,20,E4,20,20,03,00,00,E1,20,EF,20,22,61,62,63,22,00,00,00": '1  DEF   FN  a$ = "abc"',
		"L,25,00,01,00,20,9E,20,20,20,0D,00,00,E9,20,20,20,EF,20,20,20,0F,20,20,20,EC,20,20,19,0A,20,20,20,E6,20,20,10,00,00,00": "1  FOR   i   =   1   TO  10   STEP  2",
		"L,31,00,01,00,20,A1,20,20,20,20,0D,00,00,E1,20,20,EF,20,20,0F,20,20,20,20,20,EB,20,20,1E,01,00,20,20,20,20,20,01,97,20,20,20,20,A0,20,20,1E,01,00,00,00,00": "1  IF    a  =  1     THEN  1     ELSE    GOTO  1",
		"L,11,00,01,00,20,A6,20,20,20,A3,20,20,03,00,00,E1,00,00,00": "1  LINE   INPUT  a$",
		"L,0B,00,01,00,20,B3,20,20,20,8B,00,00,00": "1  ON BREAK   CONT",
		"L,11,00,01,00,20,B3,20,20,20,9F,20,20,20,1E,01,00,00,00,00": "1  ON BREAK   GOSUB   1",
		"L,0B,00,01,00,20,B3,20,20,20,CE,00,00,00": "1  ON BREAK   STOP",
		"L,14,00,01,00,20,B2,20,20,9C,20,20,20,A0,20,20,20,1E,01,00,00,00,00": "1  ON  ERROR   GOTO   1",
		"L,1E,00,01,00,20,B2,20,20,0D,00,00,F8,20,20,9F,20,20,20,1E,01,00,20,20,2C,20,20,1E,02,00,00,07,00,02,00,20,C5,00,00,00": "1  ON  x  GOSUB   1  ,  2\n2  REM",
		"L,1E,00,01,00,20,B2,20,20,0D,00,00,F8,20,20,A0,20,20,20,1E,01,00,20,20,2C,20,20,1E,02,00,00,07,00,02,00,20,C5,00,00,00": "1  ON  x  GOTO   1  ,  2\n2  REM",
		"L,22,00,01,00,20,20,BF,20,20,20,ED,20,20,20,20,22,23,23,23,23,22,20,3B,20,20,0D,00,00,72,E9,20,20,3B,00,00,00": '1   PRINT   USING    "####" ;  ri  ;',
		"L,10,00,01,00,20,D8,20,20,20,E7,20,20,0F,2C,0E,00,00,00": "1  WINDOW   SWAP  1,0",
		"0D,00,00,E1,EF,0F,20,01,97,61,3D,32": "a=1 ELSE a=2",
		"0D,00,00,E1,EF,0F,20,01,C0,63,6F,6D,6D,65,6E,74": "a=1 'comment",
		"0D,00,00,E1,EF,0F,20,01,01,C0,63,6F,6D,6D,65,6E,74": "a=1 :'comment",
		"01,01,0D,00,00,E1,EF,11,F5,10,F5,0F,01,20,01": "::a=3-2-1: :",
		"20,0D,00,00,E1,20,EF,20,20,28,20,02,00,00,E2,20,F0,20,02,00,00,E3,20,20,29,20,F6,20,20,20,20,20,28,20,0D,00,00,E4,20,F3,0D,00,00,E5,20,29": " a =  ( b% >= c%  ) *     ( d <=e )",
		"0D,00,00,E1,20,EF,20,28,28,28,11,F4,10,29,29,F6,28,28,11,F5,15,29,29,29": "a = (((3+2))*((3-7)))"
	},
	PRG: {
		"L,12,00,64,00,01,C0,44,61,73,20,52,61,65,74,73,65,6C,00,1D,00,6E,00,01,C0,32,31,2E,35,2E,31,39,38,38,20,4B,6F,70,66,20,75,6D,20,4B,6F,70,66,00,46,00,78,00,01,C0,61,62,2A,63,3D,64,65,20,20,64,65,2B,66,67,3D,68,69,20,20,20,5B,64,61,62,65,69,20,73,69,6E,64,20,61,2D,69,20,76,65,72,73,63,68,69,65,64,65,6E,65,20,5A,69,66,66,65,72,6E,20,31,2D,39,21,21,5D,00,31,00,82,00,AD,20,0F,01,BF,22,50,6C,65,61,73,65,20,77,61,69,74,20,2E,2E,2E,20,20,28,20,63,61,2E,20,31,20,6D,69,6E,20,33,34,20,73,65,63,20,29,22,00,0C,00,8C,00,86,01,8E,20,61,2D,79,00,07,00,96,00,01,C0,00,0C,00,9B,00,0D,00,00,FA,EF,FF,46,00,45,00,A0,00,9E,20,0D,00,00,E1,EF,0F,20,EC,20,17,01,9E,20,0D,00,00,E2,EF,0F,20,EC,20,17,01,9E,20,0D,00,00,E3,EF,0F,20,EC,20,17,01,9E,20,0D,00,00,E6,EF,0F,20,EC,20,17,01,9E,20,0D,00,00,E7,EF,0F,20,EC,20,17,00,2F,00,AA,00,0D,00,00,64,E5,EF,28,0D,00,00,E1,F6,19,0A,F4,0D,00,00,E2,29,F6,0D,00,00,E3,01,A1,20,0D,00,00,64,E5,EE,19,63,20,EB,20,1E,40,01,00,30,00,B4,00,0D,00,00,68,E9,EF,0D,00,00,64,E5,F4,28,0D,00,00,E6,F6,19,0A,F4,0D,00,00,E7,29,01,A1,20,0D,00,00,68,E9,EE,19,63,20,EB,20,1E,40,01,00,48,00,BE,00,0D,00,00,E4,EF,FF,0C,28,0D,00,00,64,E5,F7,19,0A,29,01,0D,00,00,E5,EF,0D,00,00,64,E5,20,FB,20,19,0A,01,0D,00,00,E8,EF,FF,0C,28,0D,00,00,68,E9,F7,19,0A,29,01,0D,00,00,E9,EF,0D,00,00,68,E9,20,FB,20,19,0A,00,6A,00,C8,00,A1,20,0D,00,00,E1,EF,0D,00,00,E2,20,FC,20,0D,00,00,E1,EF,0D,00,00,E3,20,FC,20,0D,00,00,E1,EF,0D,00,00,E4,20,FC,20,0D,00,00,E1,EF,0D,00,00,E5,20,FC,20,0D,00,00,E1,EF,0D,00,00,E6,20,FC,20,0D,00,00,E1,EF,0D,00,00,E7,20,FC,20,0D,00,00,E1,EF,0D,00,00,E8,20,FC,20,0D,00,00,E1,EF,0D,00,00,E9,20,EB,20,1E,40,01,00,5E,00,D2,00,A1,20,0D,00,00,E2,EF,0D,00,00,E3,20,FC,20,0D,00,00,E2,EF,0D,00,00,E4,20,FC,20,0D,00,00,E2,EF,0D,00,00,E5,20,FC,20,0D,00,00,E2,EF,0D,00,00,E6,20,FC,20,0D,00,00,E2,EF,0D,00,00,E7,20,FC,20,0D,00,00,E2,EF,0D,00,00,E8,20,FC,20,0D,00,00,E2,EF,0D,00,00,E9,20,EB,20,1E,40,01,00,52,00,DC,00,A1,20,0D,00,00,E3,EF,0D,00,00,E4,20,FC,20,0D,00,00,E3,EF,0D,00,00,E5,20,FC,20,0D,00,00,E3,EF,0D,00,00,E6,20,FC,20,0D,00,00,E3,EF,0D,00,00,E7,20,FC,20,0D,00,00,E3,EF,0D,00,00,E8,20,FC,20,0D,00,00,E3,EF,0D,00,00,E9,20,EB,20,1E,40,01,00,46,00,E6,00,A1,20,0D,00,00,E4,EF,0D,00,00,E5,20,FC,20,0D,00,00,E4,EF,0D,00,00,E6,20,FC,20,0D,00,00,E4,EF,0D,00,00,E7,20,FC,20,0D,00,00,E4,EF,0D,00,00,E8,20,FC,20,0D,00,00,E4,EF,0D,00,00,E9,20,EB,20,1E,40,01,00,3A,00,F0,00,A1,20,0D,00,00,E5,EF,0D,00,00,E6,20,FC,20,0D,00,00,E5,EF,0D,00,00,E7,20,FC,20,0D,00,00,E5,EF,0D,00,00,E8,20,FC,20,0D,00,00,E5,EF,0D,00,00,E9,20,EB,20,1E,40,01,00,2E,00,FA,00,A1,20,0D,00,00,E6,EF,0D,00,00,E7,20,FC,20,0D,00,00,E6,EF,0D,00,00,E8,20,FC,20,0D,00,00,E6,EF,0D,00,00,E9,20,EB,20,1E,40,01,00,22,00,04,01,A1,20,0D,00,00,E7,EF,0D,00,00,E8,20,FC,20,0D,00,00,E7,EF,0D,00,00,E9,20,EB,20,1E,40,01,00,16,00,0E,01,A1,20,0D,00,00,E8,EF,0D,00,00,E9,20,EB,20,1E,40,01,00,13,00,18,01,A1,20,0D,00,00,E9,EF,0E,20,EB,20,1E,40,01,00,11,00,1D,01,0D,00,00,FA,EF,FF,46,F5,0D,00,00,FA,00,18,00,22,01,8A,01,BF,22,44,69,65,20,4C,6F,65,73,75,6E,67,3A,22,01,BF,00,43,00,2C,01,BF,20,0D,00,00,E1,F6,19,0A,F4,0D,00,00,E2,22,2A,22,0D,00,00,E3,22,3D,22,0D,00,00,64,E5,22,20,2F,20,22,0D,00,00,64,E5,22,2B,22,0D,00,00,E6,F6,19,0A,F4,0D,00,00,E7,22,3D,22,0D,00,00,68,E9,00,16,00,36,01,BF,20,0D,00,00,FA,2C,0D,00,00,FA,F7,1A,2C,01,01,CE,00,1F,00,40,01,B0,20,0D,00,00,E7,2C,0D,00,00,E6,2C,0D,00,00,E3,2C,0D,00,00,E2,2C,0D,00,00,E1,00,00,00": '100 \'Das Raetsel\n110 \'21.5.1988 Kopf um Kopf\n120 \'ab*c=de  de+fg=hi   [dabei sind a-i verschiedene Ziffern 1-9!!]\n130 MODE 1:PRINT"Please wait ...  ( ca. 1 min 34 sec )"\n140 CLEAR:DEFINT a-y\n150 \'\n155 z=TIME\n160 FOR a=1 TO 9:FOR b=1 TO 9:FOR c=1 TO 9:FOR f=1 TO 9:FOR g=1 TO 9\n170 de=(a*10+b)*c:IF de>99 THEN 320\n180 hi=de+(f*10+g):IF hi>99 THEN 320\n190 d=INT(de/10):e=de MOD 10:h=INT(hi/10):i=hi MOD 10\n200 IF a=b OR a=c OR a=d OR a=e OR a=f OR a=g OR a=h OR a=i THEN 320\n210 IF b=c OR b=d OR b=e OR b=f OR b=g OR b=h OR b=i THEN 320\n220 IF c=d OR c=e OR c=f OR c=g OR c=h OR c=i THEN 320\n230 IF d=e OR d=f OR d=g OR d=h OR d=i THEN 320\n240 IF e=f OR e=g OR e=h OR e=i THEN 320\n250 IF f=g OR f=h OR f=i THEN 320\n260 IF g=h OR g=i THEN 320\n270 IF h=i THEN 320\n280 IF i=0 THEN 320\n285 z=TIME-z\n290 CLS:PRINT"Die Loesung:":PRINT\n300 PRINT a*10+b"*"c"="de" / "de"+"f*10+g"="hi\n310 PRINT z,z/300:STOP\n320 NEXT g,f,c,b,a'
	}
};


const moreTests: AllTestsType = { // eslint-disable-line one-var
	"if": {
		"A1,0D,00,00,E1,EF,0D,00,00,E2,F4,13,F6,0D,00,00,E3,EB,0D,00,00,E1,EF,0D,00,00,E1,F4,0F,01,A0,20,1E,0A,00,01,97,0D,00,00,E1,EF,0D,00,00,E1,F5,0F,01,A0,20,1E,14,00": "IF a=b+5*c THEN a=a+1:GOTO 10 ELSE a=a-1:GOTO 20"
	}
};


type hooksWithBasicTokenizer = NestedHooks & {
	basicTokenizer: BasicTokenizer,
};

function createBasicTokenizer() {
	return new BasicTokenizer();
}

function fnHex2Bin(hex: string) {
	return hex.split(",").map(function (s) {
		return String.fromCharCode(Number("0x" + s));
	}).join("");
}

function runSingleTest(basicTokenizer: BasicTokenizer, key: string) {
	const withLines = (key.charAt(0) === "L");
	let input = fnHex2Bin(withLines ? key.substring(2) : key);

	if (!withLines && input.charCodeAt(input.length - 1) !== 0) {
		input += "\x00"; // append EOL
	}

	const result = withLines ? basicTokenizer.decode(input).replace(/\n$/, "") : basicTokenizer.decodeLineFragment(input, 0, input.length);

	return result;
}

QUnit.module("BasicTokenizer:decode: Tests", function (hooks) {
	hooks.before(function () {
		(hooks as hooksWithBasicTokenizer).basicTokenizer = createBasicTokenizer();
	});

	function runTestsFor(category: string, tests: TestsType, assert?: Assert, results?: ResultType) {
		const basicTokenizer = (hooks as hooksWithBasicTokenizer).basicTokenizer;

		for (const key in tests) {
			if (tests.hasOwnProperty(key)) {
				const expected = tests[key],
					result = runSingleTest(basicTokenizer, key);

				if (results) {
					results[category].push(TestHelper.stringInQuotes(key) + ": " + TestHelper.stringInQuotes(result));
				}

				if (assert) {
					const firstLine = expected.substring(0, expected.indexOf("\n")) || expected;

					assert.strictEqual(result, expected, firstLine);
				}
			}
		}
	}

	TestHelper.generateAllTests(allTests, runTestsFor, hooks);
});


QUnit.module("BasicTokenizer:decode: More Tests", function (hooks) {
	hooks.before(function () {
		(hooks as hooksWithBasicTokenizer).basicTokenizer = createBasicTokenizer();
	});

	function runTestsForMore(category: string, tests: TestsType, assert?: Assert, results?: ResultType) {
		const basicTokenizer = (hooks as hooksWithBasicTokenizer).basicTokenizer;

		for (const key in tests) {
			if (tests.hasOwnProperty(key)) {
				const expected = tests[key],
					result = runSingleTest(basicTokenizer, key);

				if (results) {
					results[category].push(TestHelper.stringInQuotes(key) + ": " + TestHelper.stringInQuotes(result));
				}

				if (assert) {
					const firstLine = expected.substring(0, expected.indexOf("\n")) || expected;

					assert.strictEqual(result, expected, firstLine);
				}
			}
		}
	}

	TestHelper.generateAllTests(moreTests, runTestsForMore, hooks);
});
