import { CanvasOptions, ICanvas, CanvasClickType, CanvasCharType } from "./Interfaces";
export declare class TextCanvas implements ICanvas {
    private readonly options;
    private readonly fnUpdateCanvasHandler;
    private readonly fnUpdateCanvas2Handler;
    private fps;
    private isRunning;
    private animationTimeoutId?;
    private animationFrame?;
    private readonly cpcAreaBox;
    private readonly textText;
    private borderWidth;
    private cols;
    private rows;
    private needUpdate;
    private readonly textBuffer;
    private hasFocus;
    private customCharset;
    constructor(options: CanvasOptions);
    private static readonly cpc2Unicode;
    private static readonly winData;
    setOnCanvasClick(onCanvasClickHandler: CanvasClickType): void;
    reset(): void;
    resetCustomChars(): void;
    setPalette(_palette: "color" | "green" | "grey"): void;
    setScreenOffset(_offset: number): void;
    updateColorsAndCanvasImmediately(_inkList: number[]): void;
    updateSpeedInk(): void;
    setCustomChar(char: number, charData: CanvasCharType): void;
    getCharData(char: number): CanvasCharType;
    setDefaultInks(): void;
    getXpos(): number;
    getYpos(): number;
    getByte(_addr: number): number | null;
    setByte(_addr: number, _byte: number): void;
    draw(_x: number, _y: number): void;
    move(_x: number, _y: number): void;
    plot(_x: number, _y: number): void;
    test(_x: number, _y: number): number;
    setInk(_pen: number, _ink1: number, _ink2: number): boolean;
    setBorder(_ink1: number, _ink2: number): void;
    setGPen(_gPen: number): void;
    setGPaper(_gPaper: number): void;
    setGTransparentMode(_transparent: boolean): void;
    printGChar(_char: number): void;
    drawCursor(_x: number, _y: number, _pen: number, _paper: number): void;
    fill(_fillPen: number): void;
    setOrigin(_xOrig: number, _yOrig: number): void;
    getXOrigin(): number;
    getYOrigin(): number;
    setGWindow(_xLeft: number, _xRight: number, _yTop: number, _yBottom: number): void;
    setGColMode(_gColMode: number): void;
    clearGraphicsWindow(): void;
    setSpeedInk(_time1: number, _time2: number): void;
    setMask(_mask: number): void;
    setMaskFirst(_maskFirst: number): void;
    getMode(): number;
    changeMode(_mode: number): void;
    getCanvasElement(): HTMLElement;
    takeScreenShot(): string;
    private resetTextBuffer;
    private setNeedUpdate;
    private updateCanvas2;
    private updateCanvas;
    startUpdateCanvas(): void;
    stopUpdateCanvas(): void;
    private updateTextWindow;
    private setFocusOnCanvas;
    private getMousePos;
    private canvasClickAction;
    onCanvasClick(event: MouseEvent): void;
    onWindowClick(_event: Event): void;
    fillTextBox(left: number, top: number, width: number, height: number, _paper?: number): void;
    private clearTextBufferBox;
    private copyTextBufferBoxUp;
    private copyTextBufferBoxDown;
    private putCharInTextBuffer;
    private getCharFromTextBuffer;
    printChar(char: number, x: number, y: number, _pen: number, _paper: number, _transparent: boolean): void;
    readChar(x: number, y: number, _pen: number, _paper: number): number;
    clearTextWindow(left: number, right: number, top: number, bottom: number, _paper: number): void;
    setMode(mode: number): void;
    clearFullWindow(): void;
    windowScrollUp(left: number, right: number, top: number, bottom: number, _paper: number): void;
    windowScrollDown(left: number, right: number, top: number, bottom: number, _paper: number): void;
}
//# sourceMappingURL=TextCanvas.d.ts.map