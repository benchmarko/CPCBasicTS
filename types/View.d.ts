export interface SelectOptionElement {
    value: string;
    text: string;
    title: string;
    selected: boolean;
}
export interface AreaInputElement {
    value: string;
    title: string;
    checked: boolean;
    imgUrl: string;
}
export declare class View {
    static getElementById1(id: string): HTMLElement;
    static getElementByIdAs<T extends HTMLButtonElement | HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | HTMLElement>(id: string): T;
    static readonly ids: {
        arrayBoundsInput: string;
        autorunInput: string;
        basicVersionSelect: string;
        canvasTypeSelect: string;
        consoleLogArea: string;
        consoleLogText: string;
        continueButton: string;
        convertArea: string;
        cpcArea: string;
        cpcCanvas: string;
        databaseSelect: string;
        debugInput: string;
        directorySelect: string;
        disassArea: string;
        disassInput: string;
        disassText: string;
        dropZone: string;
        exampleSelect: string;
        exportArea: string;
        exportBase64Input: string;
        exportDSKInput: string;
        exportTokenizedInput: string;
        fileInput: string;
        galleryArea: string;
        galleryAreaItems: string;
        implicitLinesInput: string;
        inp2Area: string;
        inp2Text: string;
        inputArea: string;
        inputText: string;
        kbdAlpha: string;
        kbdArea: string;
        kbdAreaInner: string;
        kbdLayoutSelect: string;
        kbdNum: string;
        moreArea: string;
        outputArea: string;
        outputText: string;
        paletteSelect: string;
        prettyBracketsInput: string;
        prettyColonsInput: string;
        prettySpaceInput: string;
        redoButton: string;
        renumKeepInput: string;
        renumNewInput: string;
        renumStartInput: string;
        renumStepInput: string;
        resultArea: string;
        resultText: string;
        runButton: string;
        screenshotLink: string;
        settingsArea: string;
        showConsoleLogInput: string;
        showCpcInput: string;
        showDisassInput: string;
        showInp2Input: string;
        showInputInput: string;
        showKbdInput: string;
        showOutputInput: string;
        showResultInput: string;
        showVariableInput: string;
        soundInput: string;
        speedInput: string;
        stopButton: string;
        traceInput: string;
        textText: string;
        undoButton: string;
        variableArea: string;
        varSelect: string;
        varText: string;
        viewArea: string;
    };
    getHidden(id: string): boolean;
    setHidden(id: string, hidden: boolean, display?: string): this;
    setDisabled(id: string, disabled: boolean): this;
    toggleClass(id: string, className: string): void;
    getAreaValue(id: string): string;
    setAreaValue(id: string, value: string): this;
    getInputValue(id: string): string;
    setInputValue(id: string, value: string): this;
    getInputChecked(id: string): boolean;
    setInputChecked(id: string, checked: boolean): this;
    setAreaInputList(id: string, inputs: AreaInputElement[]): this;
    setSelectOptions(id: string, options: SelectOptionElement[]): this;
    getSelectOptions(id: string): SelectOptionElement[];
    getSelectValue(id: string): string;
    setSelectValue(id: string, value: string): this;
    setSelectTitleFromSelectedOption(id: string): this;
    setAreaScrollTop(id: string, scrollTop?: number): this;
    private setSelectionRange;
    setAreaSelection(id: string, pos: number, endPos: number): this;
    attachEventHandler(type: string, eventHandler: EventListenerOrEventListenerObject): this;
    static getEventTarget<T extends HTMLElement>(event: Event): T;
    static requestFullscreenForId(id: string): boolean;
}
//# sourceMappingURL=View.d.ts.map